{"version":3,"sources":["../../routes/admin.js"],"names":["express","require","router","Router","bodyParser","use","json","urlencoded","extended","morgan","Models","req","res","next","url","isAuthenticated","status","message","user","auth","post","promises","body","userList","forEach","authValue","admin","push","User","addUser","firstName","lastName","email","pseudo","password","Promise","all","then","success","get","findAll","allUserData","userArray","dataValues","id","group_id","Sondage","findOne","sondage","Group","addGroup","groupName","selectedUsers","promise","resolve","check","update","selectedGroup","where","getSondage","sondageList","getGroups","groupList","console","log","createSondage","sondageId","send","sondage_id","sondage_name","findById","getCommentairesJour","params","jour","comments","getStatistics","statisticTab","getStatisticsSpecific","sondageResult","Keyword","keywords","keywordList","keyword","name","addKeyword","Post","posts","addPost","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\n\nconst router = express.Router();\n\n// Le body Parser permet d'acceder aux variable envoyés dans le body\nconst bodyParser = require('body-parser');\n\nrouter.use(bodyParser.json());\nrouter.use(express.urlencoded({ extended: false }));\n\nconst morgan = require('morgan');\n\n// Récupère les models\nconst Models = require('../models/index');\n\nrouter.use(morgan('dev'));\n\nrouter.use((req, res, next) => {\n  if (req.url === '/login') {\n    next();\n  } else if (!req.isAuthenticated()) {\n    res.status(401).json({ message: 'Not logged in' });\n  } else if (req.user.auth !== 1) {\n    res.status(401).json({ message: 'Not authorized' });\n  } else {\n    next();\n  }\n});\n\n// --------- Routes protegées par token -------------\n\n// Un administrateur peut ajouter un autre administrateur :\n// Les attributs de l'admin sont dans le body de la requète\n// TODO : Prendre en compte le cas où il y a une erreure au cours de la création de l'admin'\n\n// Routes relatives a la gestion des admins et des users\n/* router.post('/createAdmin', (req, res) => {\n  // On vérifie que les données minmums pour créer un utilisateur sont bien présentes\n  if (!req.body.pseudo || !req.body.mp) {\n    res.status(400).send(\"Bad Request : The body of the create admin request doesnt contain pseudo or mp ! \");\n  } else {\n    Models.Admin.addAdmin(req.body.pseudo, req.body.mp, Date.now()).then(() => {\n      res.status(200).send(`Admin ${req.body.pseudo} created`);\n    });\n  }\n}); */\n\n// firstName, lastName, email, pseudo, password, auth, photo\nrouter.post('/postUsers',\n  (req, res) => {\n    const promises = [];\n    req.body.userList.forEach((user) => {\n      let authValue = 0;\n      if (user.admin) {\n        authValue = 1;\n      }\n      promises.push(Models.User.addUser(\n        user.firstName,\n        user.lastName,\n        user.email,\n        user.pseudo, \n        user.password, \n        authValue,\n      ));\n    });\n    Promise.all(promises).then(res.status(200).json({ success: true }));\n  });\n\nrouter.get('/getUsers', (req, res) => {\n  Models.User.findAll().then((allUserData) => {\n    const userArray = [];\n    allUserData.forEach((user) => {\n      const {\n        firstName, lastName, email, pseudo, id, group_id,\n      } = user.dataValues; \n      userArray.push({\n        firstName: firstName,\n        lastName: lastName,\n        email: email,\n        pseudo: pseudo,\n        id: id,\n        group_id: group_id,\n      });\n    });\n    res.json(userArray);\n  });\n});\n\nrouter.post('/postGroup', (req, res) => {\n  Models.Sondage.findOne().then((sondage) => {\n    Models.Group.addGroup(sondage.dataValues.id, req.body.groupName).then(() => {\n      res.status(200).json({ success: true });\n    });\n  });\n});\n\nrouter.post('/changeUserGroup', (req, res) => {\n  const promises = [];\n  req.body.selectedUsers.forEach((user) => {\n    const promise = new Promise((resolve) => {\n      if (user.check) {\n        Models.User.update({ group_id: req.body.selectedGroup.id }, { where: { id: user.id } })\n          .then(() => {\n            resolve();\n          });\n      } else {\n        resolve();\n      }\n    });\n    promises.push(promise);\n  });\n  Promise.all(promises).then(() => {\n    res.status(200).json({ success: true });\n  });\n});\n// Route relative à l'affichage et la creation de sondage\n\nrouter.get('/getSondage', (req, res) => {\n  Models.User.findOne({ where: { id: req.user.id } }).then((user) => {\n    user.getSondage().then((sondageList) => {\n      res.status(200).json(sondageList);\n    });\n  });\n});\n\nrouter.get('/getGroups', (req, res) => {\n  Models.User.findOne({ where: { id: req.user.id } }).then((user) => {\n    user.getGroups().then((groupList) => {\n      console.log(\"Sent all groups to client\");\n      res.status(200).json(groupList);\n    });\n  });\n});\n\nrouter.post('/postSondage', (req, res) => {\n  Models.User.findOne({ where: { id: req.user.id } }).then((user) => {\n    user.createSondage(req.body).then((sondageId) => {\n      res.json({ sondageId: sondageId });\n    });\n  });\n});\n\nrouter.post('/changeNextSondage', (req, res) => {\n  if (!req.body) {\n    res.status(400).send(\"Bad Request : The body doesnt contain next_sondage ! \");\n  } else {\n    Models.Group.update({ sondage_id: req.body.sondage_id }, { where: { id: req.body.group_id } })\n      .then(() => {\n        console.log(\"Changed the sondage to sondage: \", req.body.sondage_id, \" for the group: \", req.body.sondage_id);\n        res.status(200).json(`Changed the sondage to sondage: ${req.body.sondage_name} for the group: ${req.body.sondage_name}`);\n      });\n  }\n});\n\n// Route relative aux statisques\n\nrouter.get('/getCommentaireJour/:jour', (req, res) => {\n  Models.User.findById(req.user.id).then((user) => {\n    user.getCommentairesJour(req.params.jour).then((comments) => {\n      res.status(200).json(comments);\n    });\n  });\n});\n\nrouter.get(\"/generalStatistics\", (req, res) => {\n  Models.User.findById(req.user.id).then((user) => {\n    user.getStatistics((statisticTab) => {\n      res.json(statisticTab);\n    });\n  });\n});\n\nrouter.get(\"/specificStatistics/:year/:month/:day/:group\", (req, res) => {\n  Models.User.findById(req.user.id).then((user) => {\n    console.log(req.params);\n    user.getStatisticsSpecific(req.params).then((sondageResult) => {\n      res.json(sondageResult);\n    });\n  });\n});\n\n// Route relative aux aux mot clef\n\nrouter.get(\"/getKeywords\", (req, res) => {\n  Models.Keyword.findAll().then((keywords) => {\n    const keywordList = [];\n    keywords.forEach((keyword) => {\n      keywordList.push(keyword.dataValues.name);\n    });\n    res.status(200).json(keywordList);\n  });\n});\n\nrouter.post(\"/addKeyWord\", (req, res) => {\n  Models.Keyword.addKeyword(req.body.name).then(() => {\n    Models.Keyword.findAll().then((keywords) => {\n      const keywordList = [];\n      keywords.forEach((keyword) => {\n        keywordList.push(keyword.dataValues.name);\n      });\n      res.status(200).json(keywordList);\n    });\n  });\n});\n\n// Route relative aux posts\n\nrouter.get(\"/getPosts\", (req, res) => {\n  Models.Post.findAll().then((posts) => {\n    res.json(posts);\n  });\n});\n\nrouter.post(\"/addPost\", (req, res) => {\n  Models.Post.addPost(req.body.post);\n  res.json({\n    success: true,\n  });\n});\n\nmodule.exports = router;"],"file":"admin.js"}