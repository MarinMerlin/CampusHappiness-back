{"version":3,"sources":["../../routes/admin.js"],"names":["express","require","router","Router","bodyParser","use","json","urlencoded","extended","morgan","Models","req","res","next","url","isAuthenticated","status","message","user","auth","post","promises","body","userList","forEach","authValue","admin","push","User","addUser","firstName","lastName","email","pseudo","password","Promise","all","then","success","get","findAll","allUserData","userArray","dataValues","id","findOne","where","getSondage","sondageList","console","log","getGroups","groupList","createSondage","sondageId","send","Sondage","update","current","sondage","name","findById","getCommentairesJour","params","jour","comments","getStatistics","statisticTab","getStatisticsSpecific","sondageResult","Keyword","keywords","keywordList","keyword","addKeyword","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\n\nconst router = express.Router();\n\n\n// Le body Parser permet d'acceder aux variable envoyés dans le body\nconst bodyParser = require('body-parser');\n\nrouter.use(bodyParser.json());\nrouter.use(express.urlencoded({ extended: false }));\n\nconst morgan = require('morgan');\n\n// Récupère les models\nconst Models = require('../models/index');\n\nrouter.use(morgan('dev'));\n\nrouter.use((req, res, next) => {\n  if (req.url === '/login') {\n    next();\n  } else if (!req.isAuthenticated()) {\n    res.status(401).json({ message: 'Not logged in' });\n  } else if (req.user.auth !== 1) {\n    res.status(401).json({ message: 'Not authorized' });\n  } else {\n    next();\n  }\n});\n\n// --------- Routes protegées par token -------------\n\n// Un administrateur peut ajouter un autre administrateur :\n// Les attributs de l'admin sont dans le body de la requète\n// TODO : Prendre en compte le cas où il y a une erreure au cours de la création de l'admin'\n\n// Routes relatives a la gestion des admins et des users\n/* router.post('/createAdmin', (req, res) => {\n  console.log(`creating admin ${req.body.pseudo}`);\n  // On vérifie que les données minmums pour créer un utilisateur sont bien présentes\n  if (!req.body.pseudo || !req.body.mp) {\n    console.log(\"/!\\\\ ERROR : The body of the create admin request doesnt contain pseudo or mp !\");\n    res.status(400).send(\"Bad Request : The body of the create admin request doesnt contain pseudo or mp ! \");\n  } else {\n    Models.Admin.addAdmin(req.body.pseudo, req.body.mp, Date.now()).then(() => {\n      console.log(`Added admin: ${req.body.pseudo}`);\n      res.status(200).send(`Admin ${req.body.pseudo} created`);\n    });\n  }\n}); */\n\n// firstName, lastName, email, pseudo, password, auth, photo\nrouter.post('/postUsers',\n  (req, res) => {\n    const promises = [];\n    req.body.userList.forEach((user) => {\n      let authValue = 0;\n      if (user.admin) {\n        authValue = 1;\n      }\n      promises.push(Models.User.addUser(\n        user.firstName,\n        user.lastName,\n        user.email,\n        user.pseudo, \n        user.password, \n        authValue,\n      ));\n    });\n    Promise.all(promises).then(res.status(200).json({ success: true }));\n  });\n\nrouter.get('/getUsers', (req, res) => {\n  Models.User.findAll().then((allUserData) => {\n    const userArray = [];\n    allUserData.forEach((user) => {\n      const {\n        firstName, lastName, email, pseudo, id, \n      } = user.dataValues; \n      userArray.push({\n        firstName: firstName,\n        lastName: lastName,\n        email: email,\n        pseudo: pseudo,\n        id: id,\n      });\n    });\n    res.json(userArray);\n  });\n});\n// Route relative à l'affichage et la creation de sondage\n\nrouter.get('/getSondage', (req, res) => {\n  Models.User.findOne({ where: { id: req.user.id } }).then((user) => {\n    user.getSondage().then((sondageList) => {\n      console.log(\"Sent all sondages to client\");\n      res.status(200).json(sondageList);\n    });\n  });\n});\n\nrouter.get('/getGroups', (req, res) => {\n  Models.User.findOne({ where: { id: req.user.id } }).then((user) => {\n    user.getGroups().then((groupList) => {\n      console.log(\"Sent all groups to client\");\n      res.status(200).json(groupList);\n    });\n  });\n});\n\nrouter.post('/postSondage', (req, res) => {\n  Models.User.findOne({ where: { id: req.user.id } }).then((user) => {\n    user.createSondage(req.body).then((sondageId) => {\n      res.json({ sondageId: sondageId });\n    });\n  });\n});\n\nrouter.post('/changeNextSondage', (req, res) => {\n  if (!req.body) {\n    console.log(\"/!\\\\ ERROR : Inccorect body\");\n    res.status(400).send(\"Bad Request : The body doesnt contain next_sondage ! \");\n  } else {\n    Models.Sondage.update({ current: false }, { where: { current: true } }).then(() => {\n      Models.Sondage.update({ current: true }, { where: { id: req.body.id } }).then((sondage) => {\n        console.log(\"Changed the sondage to sondage: \", req.body.name);\n        res.status(200).json(sondage.dataValues);\n      });\n    });\n  }\n});\n\n// Route relative aux statisques\n\nrouter.get('/getCommentaireJour/:jour', (req, res) => {\n  Models.User.findById(req.user.id).then((user) => {\n    user.getCommentairesJour(req.params.jour).then((comments) => {\n      console.log(\"Fetching all Commentaires on: \", req.params.jour);\n      res.status(200).json(comments);\n    });\n  });\n});\n\nrouter.get(\"/generalStatistics\", (req, res) => {\n  Models.User.findById(req.user.id).then((user) => {\n    user.getStatistics((statisticTab) => {\n      res.json(statisticTab);\n    });\n  });\n});\n\nrouter.get(\"/specificStatistics/:year/:month/:day\", (req, res) => {\n  Models.User.findById(req.user.id).then((user) => {\n    user.getStatisticsSpecific(req.params).then((sondageResult) => {\n      res.json(sondageResult);\n    });\n  });\n});\n\nrouter.get(\"/getKeywords\", (req, res) => {\n  Models.Keyword.findAll().then((keywords) => {\n    const keywordList = [];\n    keywords.forEach((keyword) => {\n      keywordList.push(keyword.dataValues.name);\n    });\n    res.status(200).json(keywordList);\n  });\n});\n\nrouter.post(\"/addKeyWord\", (req, res) => {\n  console.log(req.body);\n  Models.Keyword.addKeyword(req.body.name).then(() => {\n    Models.Keyword.findAll().then((keywords) => {\n      const keywordList = [];\n      keywords.forEach((keyword) => {\n        keywordList.push(keyword.dataValues.name);\n      });\n      res.status(200).json(keywordList);\n    });\n  });\n});\n\nmodule.exports = router;"],"file":"admin.js"}