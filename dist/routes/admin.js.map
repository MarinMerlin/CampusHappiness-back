{"version":3,"sources":["../../routes/admin.js"],"names":["express","require","passport","router","Router","bodyParser","use","json","urlencoded","extended","morgan","Models","Data","loginStrategy","serializeUser","user","done","deserializeUser","id","req","res","next","url","isAuthenticated","status","message","auth","post","authenticate","session","send","login","err","console","log","serverResponse","success","admin","pseudo","dataValues","get","destroy","promises","body","userList","forEach","push","User","addUser","firstName","lastName","email","Promise","all","then","password","findOne","where","getSondage","sondageList","createSondage","name","Sondage","update","current","sondage","getNumberRemplissages","count","getNumberRemplissagesJour","params","jour","getCommentairesJour","comments","getNumberReponses","getNumberReponsesJour","findById","getStatistics","statisticTab","getStatisticsSpecific","sondageResult","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\nconst passport = require('passport');\n\nconst router = express.Router();\n\n\n// Le body Parser permet d'acceder aux variable envoyés dans le body\nconst bodyParser = require('body-parser');\n\nrouter.use(bodyParser.json());\nrouter.use(express.urlencoded({ extended: false }));\n\nconst morgan = require('morgan');\n\n// Récupère les models\nconst Models = require('../models/index');\n\n// Récupère les fonctions de recherche de données\nconst Data = require('../models/dataFetch');\n\nrouter.use(morgan('dev'));\n\n// Authentification\nconst loginStrategy = require('../passport-config/adminStrategy');\n\npassport.use(loginStrategy);\n\npassport.serializeUser((user, done) => {\n  done(null, user);\n});\n\npassport.deserializeUser(function (id, done) {\n  done(null, id);\n});\n\nrouter.use((req, res, next) => {\n  if (req.url === '/login') {\n    next();\n  } else if (!req.isAuthenticated()) {\n    res.status(401).json({ message: 'Unauthorized. User not logged in!' });\n  } else if (req.user.auth !== 1) {\n    res.status(401).json({ message: 'Unauthorized. You do not have high enough authorization' });\n  } else {\n    next();\n  }\n});\n\nrouter.post('/login',\n  passport.authenticate('local', { session: true }),\n  (req, res) => {\n    switch (req.user) {\n      case \"wrongUser\":\n        res.status(460).send(\"Wrong username\");\n        break;\n      case \"wrongPass\":\n        res.status(461).send(\"Wrong password\");\n        break;\n      default:\n        req.login(req.user, (err) => {\n          console.log(\"successfull login\");\n        });\n        const serverResponse = { \n          success: true, \n          admin: { pseudo: req.user.dataValues.pseudo },\n        };\n        res.json(serverResponse);\n    }\n  });\n\n// --------- Routes protegées par token -------------\n\n// Un administrateur peut ajouter un autre administrateur :\n// Les attributs de l'admin sont dans le body de la requète\n// TODO : Prendre en compte le cas où il y a une erreure au cours de la création de l'admin'\n\n// Logout the session\n\nrouter.get('/logout', (req, res) => {\n  req.session.destroy();\n  res.send(\"User logged out\");\n});\n\n// Routes relatives a la gestion des admins et des users\n/* router.post('/createAdmin', (req, res) => {\n  console.log(`creating admin ${req.body.pseudo}`);\n  // On vérifie que les données minmums pour créer un utilisateur sont bien présentes\n  if (!req.body.pseudo || !req.body.mp) {\n    console.log(\"/!\\\\ ERROR : The body of the create admin request doesnt contain pseudo or mp !\");\n    res.status(400).send(\"Bad Request : The body of the create admin request doesnt contain pseudo or mp ! \");\n  } else {\n    Models.Admin.addAdmin(req.body.pseudo, req.body.mp, Date.now()).then(() => {\n      console.log(`Added admin: ${req.body.pseudo}`);\n      res.status(200).send(`Admin ${req.body.pseudo} created`);\n    });\n  }\n}); */\n\nrouter.post('/csvPost',\n  (req, res) => {\n    const promises = [];\n    req.body.userList.forEach((user) => {\n      promises.push(Models.User.addUser(user.firstName, user.lastName, user.email));\n    });\n    Promise.all(promises).then(res.status(200).json(\"User list added\"));\n  });\n\nrouter.post('/singlePost',\n  (req, res) => {\n    Models.User.addUser(\n      req.body.firstName, \n      req.body.lastName, \n      req.body.email, \n      req.body.pseudo,\n      req.body.password,\n      req.body.auth,\n    ).then(() => {\n      res.status(200).send(\"New user added\");\n      console.log(\"New user added: \", req.body.pseudo);\n    });\n  }); \n\n// Route relative à l'affichage et la creation de sondage\n\nrouter.get('/getSondage', (req, res) => {\n  Models.User.findOne({ where: { id: req.user.id } }).then((user) => {\n    user.getSondage().then((sondageList) => {\n      console.log(\"Sent all sondages to client\");\n      res.status(200).json(sondageList);\n    });\n  });\n});\n\n/* Survey object sent from the front to /postSondage\n  {\n    name: sondagename,\n    thematiqueList: [\n      {\n        name: thematiquename,\n        questionList: [\n          {\n            keyWord: motclef,\n            question: question,\n          },\n          { ... },\n        ]\n      },\n      { ... },\n    ]\n  }\n*/\nrouter.post('/postSondage', (req, res) => {\n  Models.User.findOne({ where: { id: req.user.id } }).then((user) => {\n    user.createSondage(req.body).then(() => {\n      console.log(\"New sondage created: \", req.body.name);\n      res.status(200).send(\"New sondage created\");\n    });\n  });\n});\n\nrouter.post('/changeNextSondage', (req, res) => {\n  if (!req.body) {\n    console.log(\"/!\\\\ ERROR : Inccorect body\");\n    res.status(400).send(\"Bad Request : The body doesnt contain next_sondage ! \");\n  } else {\n    Models.Sondage.update({ current: false }, { where: { current: true } }).then(() => {\n      Models.Sondage.update({ current: true }, { where: { id: req.body.id } }).then((sondage) => {\n        console.log(\"Changed the sondage to sondage: \", req.body.name);\n        res.status(200).json(sondage.dataValues);\n      });\n    });\n  }\n});\n\n// Route relative aux statisques\n\nrouter.get('/numberRemplissages', (req, res) => {\n  Data.getNumberRemplissages((count) => {\n    console.log(\"Fetching total number of Remplissage\");\n    res.status(200).json(count);\n  });\n});\n\nrouter.get('/numberRemplissagesJour/:jour', (req, res) => {\n  Data.getNumberRemplissagesJour(req.params.jour, (count) => {\n    console.log(\"Fetching total number of Remplissage on: \", req.params.jour);\n    res.status(200).json(count);\n  });\n});\n\nrouter.get('/getCommentaireJour/:jour', (req, res) => {\n  Data.getCommentairesJour(req.params.jour, (comments) => {\n    console.log(\"Fetching all Commentaires on: \", req.params.jour);\n    res.status(200).json(comments);\n  });\n});\n\nrouter.get('/numberReponses', (req, res) => {\n  Data.getNumberReponses((count) => {\n    console.log(\"Fetching total number of Reponse\");\n    res.status(200).json(count);\n  });\n});\n\nrouter.get('/numberReponsesJour/:jour', (req, res) => {\n  Data.getNumberReponsesJour(req.params.jour, (count) => {\n    res.status(200).json(count);\n    console.log(\"Fetching total number of Reponse on: \", req.params.jour);\n  });\n  res.json(\"ok\");\n});\n\nrouter.get(\"/generalStatistics\", (req, res) => {\n  Models.User.findById(req.user.id).then((user) => {\n    user.getStatistics((statisticTab) => {\n      res.json(statisticTab);\n    });\n  });\n});\n\nrouter.get(\"/specificStatistics/:year/:month/:day\", (req, res) => {\n  Models.User.findById(req.user.id).then((user) => {\n    user.getStatisticsSpecific(req.params).then((sondageResult) => {\n      res.json(sondageResult);\n    });\n  });\n});\n\nmodule.exports = router;"],"file":"admin.js"}