{"version":3,"sources":["../../routes/admin.js"],"names":["express","require","router","Router","bodyParser","use","json","urlencoded","extended","morgan","Models","post","req","res","promises","body","userList","forEach","user","authValue","admin","push","User","addUser","firstName","lastName","email","pseudo","password","Promise","all","then","status","success","get","findAll","allUserData","userArray","dataValues","id","group_id","Sondage","findOne","sondage","Group","addGroup","groupName","selectedUsers","promise","resolve","check","update","selectedGroup","where","getSondage","sondageList","console","log","getGroups","groupList","createSondage","sondageId","send","sondage_id","sondage_name","findById","getCommentairesJour","params","jour","comments","getStatistics","statisticTab","getStatisticsSpecific","sondageResult","Keyword","keywords","keywordList","keyword","name","addKeyword","Post","posts","addPost","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\n\nconst router = express.Router();\n\n// Le body Parser permet d'acceder aux variable envoyés dans le body\nconst bodyParser = require('body-parser');\n\nrouter.use(bodyParser.json());\nrouter.use(express.urlencoded({ extended: false }));\n\nconst morgan = require('morgan');\n\n// Récupère les models\nconst Models = require('../models/index');\n\nrouter.use(morgan('dev'));\n\n// router.use((req, res, next) => {\n//   if (req.url === '/login') {\n//     next();\n//   } else if (!req.isAuthenticated()) {\n//     res.status(401).json({ message: 'Not logged in' });\n//   } else if (req.user.auth !== 1) {\n//     res.status(401).json({ message: 'Not authorized' });\n//   } else {\n//     next();\n//   }\n// });\n\n// --------- Routes protegées par token -------------\n\n// Un administrateur peut ajouter un autre administrateur :\n// Les attributs de l'admin sont dans le body de la requète\n// TODO : Prendre en compte le cas où il y a une erreure au cours de la création de l'admin'\n\n// Routes relatives a la gestion des admins et des users\n/* router.post('/createAdmin', (req, res) => {\n  console.log(`creating admin ${req.body.pseudo}`);\n  // On vérifie que les données minmums pour créer un utilisateur sont bien présentes\n  if (!req.body.pseudo || !req.body.mp) {\n    console.log(\"/!\\\\ ERROR : The body of the create admin request doesnt contain pseudo or mp !\");\n    res.status(400).send(\"Bad Request : The body of the create admin request doesnt contain pseudo or mp ! \");\n  } else {\n    Models.Admin.addAdmin(req.body.pseudo, req.body.mp, Date.now()).then(() => {\n      console.log(`Added admin: ${req.body.pseudo}`);\n      res.status(200).send(`Admin ${req.body.pseudo} created`);\n    });\n  }\n}); */\n\n// firstName, lastName, email, pseudo, password, auth, photo\nrouter.post('/postUsers',\n  (req, res) => {\n    const promises = [];\n    req.body.userList.forEach((user) => {\n      let authValue = 0;\n      if (user.admin) {\n        authValue = 1;\n      }\n      promises.push(Models.User.addUser(\n        user.firstName,\n        user.lastName,\n        user.email,\n        user.pseudo, \n        user.password, \n        authValue,\n      ));\n    });\n    Promise.all(promises).then(res.status(200).json({ success: true }));\n  });\n\nrouter.get('/getUsers', (req, res) => {\n  Models.User.findAll().then((allUserData) => {\n    const userArray = [];\n    allUserData.forEach((user) => {\n      const {\n        firstName, lastName, email, pseudo, id, group_id,\n      } = user.dataValues; \n      userArray.push({\n        firstName: firstName,\n        lastName: lastName,\n        email: email,\n        pseudo: pseudo,\n        id: id,\n        group_id: group_id,\n      });\n    });\n    res.json(userArray);\n  });\n});\n\nrouter.post('/postGroup', (req, res) => {\n  Models.Sondage.findOne().then((sondage) => {\n    Models.Group.addGroup(sondage.dataValues.id, req.body.groupName).then(() => {\n      res.status(200).json({ success: true });\n    });\n  });\n});\n\nrouter.post('/changeUserGroup', (req, res) => {\n  const promises = [];\n  req.body.selectedUsers.forEach((user) => {\n    const promise = new Promise((resolve) => {\n      if (user.check) {\n        Models.User.update({ group_id: req.body.selectedGroup.id }, { where: { id: user.id } })\n          .then(() => {\n            resolve();\n          });\n      } else {\n        resolve();\n      }\n    });\n    promises.push(promise);\n  });\n  Promise.all(promises).then(() => {\n    res.status(200).json({ success: true });\n  });\n});\n// Route relative à l'affichage et la creation de sondage\n\nrouter.get('/getSondage', (req, res) => {\n  Models.User.findOne({ where: { id: req.user.id } }).then((user) => {\n    user.getSondage().then((sondageList) => {\n      console.log(\"Sent all sondages to client\");\n      res.status(200).json(sondageList);\n    });\n  });\n});\n\nrouter.get('/getGroups', (req, res) => {\n  Models.User.findOne({ where: { id: req.user.id } }).then((user) => {\n    user.getGroups().then((groupList) => {\n      console.log(\"Sent all groups to client\");\n      res.status(200).json(groupList);\n    });\n  });\n});\n\nrouter.post('/postSondage', (req, res) => {\n  Models.User.findOne({ where: { id: req.user.id } }).then((user) => {\n    user.createSondage(req.body).then((sondageId) => {\n      res.json({ sondageId: sondageId });\n    });\n  });\n});\n\nrouter.post('/changeNextSondage', (req, res) => {\n  if (!req.body) {\n    console.log(\"/!\\\\ ERROR : Inccorect body\");\n    res.status(400).send(\"Bad Request : The body doesnt contain next_sondage ! \");\n  } else {\n    Models.Group.update({ sondage_id: req.body.sondage_id }, { where: { id: req.body.group_id } })\n      .then(() => {\n        console.log(\"Changed the sondage to sondage: \", req.body.sondage_id, \" for the group: \", req.body.sondage_id);\n        res.status(200).json(`Changed the sondage to sondage: ${req.body.sondage_name} for the group: ${req.body.sondage_name}`);\n      });\n  }\n});\n\n// Route relative aux statisques\n\nrouter.get('/getCommentaireJour/:jour', (req, res) => {\n  Models.User.findById(req.user.id).then((user) => {\n    user.getCommentairesJour(req.params.jour).then((comments) => {\n      console.log(\"Fetching all Commentaires on: \", req.params.jour);\n      res.status(200).json(comments);\n    });\n  });\n});\n\nrouter.get(\"/generalStatistics\", (req, res) => {\n  Models.User.findById(req.user.id).then((user) => {\n    user.getStatistics((statisticTab) => {\n      res.json(statisticTab);\n    });\n  });\n});\n\nrouter.get(\"/specificStatistics/:year/:month/:day\", (req, res) => {\n  Models.User.findById(req.user.id).then((user) => {\n    user.getStatisticsSpecific(req.params).then((sondageResult) => {\n      res.json(sondageResult);\n    });\n  });\n});\n\n// Route relative aux aux mot clef\n\nrouter.get(\"/getKeywords\", (req, res) => {\n  Models.Keyword.findAll().then((keywords) => {\n    const keywordList = [];\n    keywords.forEach((keyword) => {\n      keywordList.push(keyword.dataValues.name);\n    });\n    res.status(200).json(keywordList);\n  });\n});\n\nrouter.post(\"/addKeyWord\", (req, res) => {\n  Models.Keyword.addKeyword(req.body.name).then(() => {\n    Models.Keyword.findAll().then((keywords) => {\n      const keywordList = [];\n      keywords.forEach((keyword) => {\n        keywordList.push(keyword.dataValues.name);\n      });\n      res.status(200).json(keywordList);\n    });\n  });\n});\n\n// Route relative aux posts\n\nrouter.get(\"/getPosts\", (req, res) => {\n  Models.Post.findAll().then((posts) => {\n    res.json(posts);\n  });\n});\n\nrouter.post(\"/addPost\", (req, res) => {\n  Models.Post.addPost(req.body.post);\n  res.json({\n    success: true,\n  });\n});\n\nmodule.exports = router;"],"file":"admin.js"}