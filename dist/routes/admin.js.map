{"version":3,"sources":["../../routes/admin.js"],"names":["express","require","router","Router","bodyParser","use","json","urlencoded","extended","morgan","passport","adminLoginStrategy","initialize","checkToken","Models","Data","post","authenticate","session","req","res","user","status","send","console","log","dataValues","pseudo","serverResponse","success","admin","token","generateJwt","body","mp","Admin","addAdmin","Date","now","then","userList","forEach","User","addUser","firstName","lastName","email","get","findOne","where","id","getSondage","sondageList","createSondage","name","Sondage","update","current","sondage","getNumberRemplissages","count","getNumberRemplissagesJour","params","jour","getCommentairesJour","comments","getNumberReponses","getNumberReponsesJour","findById","getStatistics","statisticTab","getStatisticsSpecific","date","sondageResult","err","next","message","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\n\nconst router = express.Router();\n\n\n// Le body Parser permet d'acceder aux variable envoyés dans le body\nconst bodyParser = require('body-parser');\n\nrouter.use(bodyParser.json());\nrouter.use(express.urlencoded({ extended: false }));\n\nconst morgan = require('morgan');\n\n// Authentification\nconst passport = require('passport');\nconst adminLoginStrategy = require('../passport-config/adminStrategy');\n\npassport.use(adminLoginStrategy);\npassport.initialize();\n\n// Authentification controllers\nconst checkToken = require('../controllers/adminCheckToken');\n\n// Récupère les models\nconst Models = require('../models/index');\n\n// Récupère les fonctions de recherche de données\nconst Data = require('../models/dataFetch');\n\nrouter.use(morgan('dev'));\n\nrouter.post('/login',\n  passport.authenticate('local', { session: false }),\n  (req, res) => {\n    switch (req.user) {\n      case \"wrongUser\":\n        res.status(460).send(\"Wrong username\");\n        break;\n      case \"wrongPass\":\n        res.status(461).send(\"Wrong username\");\n        break;\n      default:\n        console.log(\"Correct authentification: \", req.user.dataValues.pseudo);\n        const serverResponse = { \n          success: true, \n          admin: { pseudo: req.user.dataValues.pseudo },\n          token: req.user.generateJwt(),\n        };\n        res.json(serverResponse);\n    }\n  });\n\n// --------- Routes protegées par token -------------\n\n// Un administrateur peut ajouter un autre administrateur :\n// Les attributs de l'admin sont dans le body de la requète\n// TODO : Prendre en compte le cas où il y a une erreure au cours de la création de l'admin'\n\n// Routes relatives a la gestion des admins et des users\nrouter.post('/createAdmin', checkToken, (req, res) => {\n  console.log(`creating admin ${req.body.pseudo}`);\n  // On vérifie que les données minmums pour créer un utilisateur sont bien présentes\n  if (!req.body.pseudo || !req.body.mp) {\n    console.log(\"/!\\\\ ERROR : The body of the create admin request doesnt contain pseudo or mp !\");\n    res.status(400).send(\"Bad Request : The body of the create admin request doesnt contain pseudo or mp ! \");\n  } else {\n    Models.Admin.addAdmin(req.body.pseudo, req.body.mp, Date.now()).then(() => {\n      console.log(`Added admin: ${req.body.pseudo}`);\n      res.status(200).send(`Admin ${req.body.pseudo} created`);\n    });\n  }\n});\n\nrouter.post('/csvPost',\n  checkToken,\n  (req, res) => {\n    req.body.userList.forEach((user) => {\n      Models.User.addUser(user.firstName, user.lastName, user.email).then(() => { res.json(\"user list added\"); });\n    });\n  });\n\nrouter.post('/singlePost',\n  checkToken,\n  (req, res) => {\n    Models.User.addUser(req.body.user.firstName, req.body.user.lastName, req.body.user.email).then(() => {\n      res.status(200).send(req.body.email);\n      console.log(\"New user added: \", req.body.user);\n    });\n  }); \n\n// Route relative à l'affichage et la creation de sondage\n\nrouter.get('/getSondage', checkToken, (req, res) => {\n  Models.Admin.findOne({ where: { id: req.user.id } }).then((admin) => {\n    admin.getSondage().then((sondageList) => {\n      console.log(\"Sent all sondages to client\");\n      res.status(200).json(sondageList);\n    });\n  });\n});\n\n/* Survey object sent from the front to /postSondage\n  {\n    name: sondagename,\n    thematiqueList: [\n      {\n        name: thematiquename,\n        questionList: [\n          {\n            keyWord: motclef,\n            question: question,\n          },\n          { ... },\n        ]\n      },\n      { ... },\n    ]\n  }\n*/\nrouter.post('/postSondage', checkToken, (req, res) => {\n  Models.Admin.findOne({ where: { id: req.user.id } }).then((admin) => {\n    admin.createSondage(req.body).then(() => {\n      console.log(\"New sondage created: \", req.body.name);\n      res.status(200).send(\"New sondage created\");\n    });\n  });\n});\n\nrouter.post('/changeNextSondage', checkToken, (req, res) => {\n  if (!req.body) {\n    console.log(\"/!\\\\ ERROR : Inccorect body\");\n    res.status(400).send(\"Bad Request : The body doesnt contain next_sondage ! \");\n  } else {\n    Models.Sondage.update({ current: false }, { where: { current: true } }).then(() => {\n      Models.Sondage.update({ current: true }, { where: { id: req.body.id } }).then((sondage) => {\n        console.log(\"Changed the sondage to sondage: \", req.body.name);\n        res.status(200).json(sondage.dataValues);\n      });\n    });\n  }\n});\n\n// Route relative aux statisques\n\nrouter.get('/numberRemplissages', checkToken, (req, res) => {\n  Data.getNumberRemplissages((count) => {\n    console.log(\"Fetching total number of Remplissage\");\n    res.status(200).json(count);\n  });\n});\n\nrouter.get('/numberRemplissagesJour/:jour', checkToken, (req, res) => {\n  Data.getNumberRemplissagesJour(req.params.jour, (count) => {\n    console.log(\"Fetching total number of Remplissage on: \", req.params.jour);\n    res.status(200).json(count);\n  });\n});\n\nrouter.get('/getCommentaireJour/:jour', checkToken, (req, res) => {\n  Data.getCommentairesJour(req.params.jour, (comments) => {\n    console.log(\"Fetching all Commentaires on: \", req.params.jour);\n    res.status(200).json(comments);\n  });\n});\n\nrouter.get('/numberReponses', checkToken, (req, res) => {\n  Data.getNumberReponses((count) => {\n    console.log(\"Fetching total number of Reponse\");\n    res.status(200).json(count);\n  });\n});\n\nrouter.get('/numberReponsesJour/:jour', checkToken, (req, res) => {\n  Data.getNumberReponsesJour(req.params.jour, (count) => {\n    res.status(200).json(count);\n    console.log(\"Fetching total number of Reponse on: \", req.params.jour);\n  });\n  res.json(\"ok\");\n});\n\nrouter.get(\"/generalStatistics\", checkToken, (req, res) => {\n  Models.Admin.findById(req.user.id).then((admin) => {\n    admin.getStatistics((statisticTab) => {\n      res.json(statisticTab);\n    });\n  });\n});\n\nrouter.post(\"/specificStatistics\", checkToken, (req, res) => {\n  Models.Admin.findById(req.user.id).then((admin) => {\n    admin.getStatisticsSpecific(req.body.date).then((sondageResult) => {\n      res.json(sondageResult);\n    });\n  });\n});\n\nrouter.use((err, req, res, next) => {\n  console.log(\"error: \", err.name);\n  if (err.name === 'UnauthorizedError') {\n    res.status(401).json({ message: 'Unauthorized. Invalid token!' });\n  }\n});\n\n\nmodule.exports = router;\n"],"file":"admin.js"}