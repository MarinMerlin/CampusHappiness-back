{"version":3,"sources":["../../routes/user.js"],"names":["express","require","router","Router","bodyParser","use","json","urlencoded","extended","morgan","Models","req","res","next","isAuthenticated","url","status","message","post","newCookie","Object","assign","user","body","updatedUser","login","err","console","log","User","updateUser","id","then","get","Sondage","findOne","where","current","sondage","sondage_id","dataValues","token","generateJwt","module","exports"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AAEA,IAAMC,MAAM,GAAGF,OAAO,CAACG,MAAR,EAAf,C,CAEA;;AACA,IAAMC,UAAU,GAAGH,OAAO,CAAC,aAAD,CAA1B;;AAEAC,MAAM,CAACG,GAAP,CAAWD,UAAU,CAACE,IAAX,EAAX;AACAJ,MAAM,CAACG,GAAP,CAAWL,OAAO,CAACO,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAX;;AAEA,IAAMC,MAAM,GAAGR,OAAO,CAAC,QAAD,CAAtB;;AAEAC,MAAM,CAACG,GAAP,CAAWI,MAAM,CAAC,KAAD,CAAjB,E,CAEA;;AACA,IAAMC,MAAM,GAAGT,OAAO,CAAC,WAAD,CAAtB;;AAEAC,MAAM,CAACG,GAAP,CAAW,UAACM,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC7B,MAAI,CAACF,GAAG,CAACG,eAAJ,EAAD,IAA0BH,GAAG,CAACI,GAAJ,KAAY,QAA1C,EAAoD;AAClDH,IAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqB;AAAEW,MAAAA,OAAO,EAAE;AAAX,KAArB;AACD,GAFD,MAEO;AACLJ,IAAAA,IAAI;AACL;AACF,CAND,E,CAQA;;AAEAX,MAAM,CAACgB,IAAP,CAAY,aAAZ,EAA2B,UAACP,GAAD,EAAMC,GAAN,EAAc;AACvC,MAAMO,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAcV,GAAG,CAACW,IAAlB,EAAwBX,GAAG,CAACY,IAAJ,CAASC,WAAjC,CAAlB;AACAb,EAAAA,GAAG,CAACc,KAAJ,CAAUN,SAAV,EAAqB,UAACO,GAAD,EAAS;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCT,SAAnC;AACD,GAFD;AAGAT,EAAAA,MAAM,CAACmB,IAAP,CAAYC,UAAZ,CAAuBnB,GAAG,CAACW,IAAJ,CAASS,EAAhC,EAAoCpB,GAAG,CAACY,IAAJ,CAASC,WAA7C,EAA0DQ,IAA1D,CAA+D,YAAM;AACnEpB,IAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqBK,GAAG,CAACY,IAAJ,CAASC,WAA9B;AACD,GAFD;AAGD,CARD;AAUAtB,MAAM,CAAC+B,GAAP,CAAW,UAAX,EAAuB,UAACtB,GAAD,EAAMC,GAAN,EAAc;AACnCF,EAAAA,MAAM,CAACwB,OAAP,CAAeC,OAAf,CAAuB;AAAEC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX;AAAT,GAAvB,EAAqDL,IAArD,CAA0D,UAACM,OAAD,EAAa;AACrE5B,IAAAA,MAAM,CAACmB,IAAP,CAAYM,OAAZ,CAAoB;AAAEC,MAAAA,KAAK,EAAE;AAAEL,QAAAA,EAAE,EAAEpB,GAAG,CAACW,IAAJ,CAASS;AAAf;AAAT,KAApB,EACGC,IADH,CACQ,UAACV,IAAD,EAAU;AACd,UAAMiB,UAAU,GAAGD,OAAO,CAACE,UAAR,CAAmBT,EAAtC;AACA,UAAMU,KAAK,GAAGnB,IAAI,CAACoB,WAAL,CAAiBH,UAAjB,CAAd;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAYa,KAAZ;AACD,KALH;AAMD,GAPD;AAQD,CATD;AAWAE,MAAM,CAACC,OAAP,GAAiB1C,MAAjB","sourcesContent":["const express = require('express');\n\nconst router = express.Router();\n\n// Le body Parser permet d'acceder aux variable envoyés dans le body\nconst bodyParser = require('body-parser');\n\nrouter.use(bodyParser.json());\nrouter.use(express.urlencoded({ extended: false }));\n\nconst morgan = require('morgan');\n\nrouter.use(morgan('dev'));\n\n// Récupère les models\nconst Models = require('../models');\n\nrouter.use((req, res, next) => {\n  if (!req.isAuthenticated() && req.url !== '/login') {\n    res.status(401).json({ message: 'Not logged in' });\n  } else {\n    next();\n  }\n});\n\n// --------- Routes protegées-------------\n\nrouter.post('/updateUser', (req, res) => {\n  const newCookie = Object.assign(req.user, req.body.updatedUser);\n  req.login(newCookie, (err) => {\n    console.log(\"successfull login: \", newCookie);\n  });\n  Models.User.updateUser(req.user.id, req.body.updatedUser).then(() => {\n    res.status(200).json(req.body.updatedUser);\n  });\n});\n\nrouter.get('getToken', (req, res) => {\n  Models.Sondage.findOne({ where: { current: true } }).then((sondage) => {\n    Models.User.findOne({ where: { id: req.user.id } })\n      .then((user) => {\n        const sondage_id = sondage.dataValues.id;\n        const token = user.generateJwt(sondage_id);\n        console.log(token);\n      });\n  });\n});\n \nmodule.exports = router;"],"file":"user.js"}