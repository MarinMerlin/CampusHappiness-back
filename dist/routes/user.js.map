{"version":3,"sources":["../../routes/user.js"],"names":["express","require","Models","userCheckToken","router","Router","get","req","res","user","sondage_id","remplissage_id","serverResponse","alreadyAnswered","Remplissage","findOne","where","id","then","remplissage","Question","findAll","questions","questionList","forEach","question","push","Reponse","reponses","reponseList","reponse","json","post","user_id","findById","send","msg","User","sondage","answered_questions","body","answerSondage","status","newIntensity","update","mailIntensity","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\nconst Models = require('../models/index');\nconst userCheckToken = require('../controllers/userCheckToken');\n\nconst router = express.Router();\n\n// front send un get avec header\nrouter.get('/getSondage',\n  userCheckToken,\n  (req, res) => {\n    const { sondage_id, remplissage_id } = req.user;\n    const serverResponse = { alreadyAnswered: false };\n    Models.Remplissage.findOne({ where: { id: remplissage_id } }).then((remplissage) => {\n      Models.Question.findAll({ where: { sondage_id: sondage_id } }).then((questions) => {\n        const questionList = [];\n        questions.forEach((question) => {\n          questionList.push(question);\n        });\n        serverResponse.questionList = questionList; \n        \n        // Si le sondage a déjà été remplis, on renvois les réponses\n        if (remplissage) {\n          serverResponse.alreadyAnswered = true;\n          Models.Reponse.findAll({ where: { remplissage_id: remplissage_id } }).then((reponses) => {\n            const reponseList = [];\n            reponses.forEach((reponse) => {\n              reponseList.push(reponse);\n            }); \n            serverResponse.reponseList = reponseList;\n            res.json(serverResponse);\n          }); \n        } else {\n          res.json(serverResponse);\n        }\n      }); \n    });\n  });\n\n\n// front send un post avec header et dans le body un answered_questions (cf index.js)\nrouter.post('/answerSondage',\n  userCheckToken,\n  (req, res) => {\n    const { user_id, sondage_id, remplissage_id } = req.user;\n    Models.Remplissage.findById(remplissage_id).then((remplissage) => {\n      if (remplissage) {\n        res.send({ msg: \"Vous aviez dejas repondue au sondage...\" });\n      } else {\n        Models.User.findById(user_id).then((user) => {\n          const sondage = { \n            sondage_id: sondage_id,\n            remplissage_id: remplissage_id,\n            answered_questions: req.body.answered_questions, \n          };\n          user.answerSondage(sondage);\n          res.status(200).send({ msg: \"merci d'avoir repondue :)\" });\n        });\n      }\n    });\n  });\n\nrouter.post('/changeFreq', userCheckToken, (req, res) => {\n  if (typeof (req.body.newIntensity) === \"number\") {\n    Models.User.update(\n      { mailIntensity: req.body.newIntensity },\n      { where: req.body.user_id },\n    ).then(res.send({ msg: \"Mail Intensity changed\" }));\n  }\n});\n\nmodule.exports = router;\n"],"file":"user.js"}