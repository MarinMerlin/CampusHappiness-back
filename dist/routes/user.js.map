{"version":3,"sources":["../../routes/user.js"],"names":["express","require","router","Router","bodyParser","use","json","urlencoded","extended","morgan","Models","userCheckToken","get","req","res","user","sondage_id","remplissage_id","serverResponse","alreadyAnswered","Remplissage","findOne","where","id","then","remplissage","Question","findAll","include","model","Thematique","questions","questionList","thematiqueList","Map","forEach","question","quest","JSON","parse","stringify","thematique","dataValues","set","newList","push","elem","console","log","Reponse","reponses","Sondage","sondage","Commentaire","commentaires","sondageName","name","reponseList","commentaireList","reponse","commentaire","post","user_id","body","answered_questions","findById","User","answered_commentaires","updateSondage","status","send","msg","answerSondage","newIntensity","update","mailIntensity","err","next","message","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\n\nconst router = express.Router();\n\n// Le body Parser permet d'acceder aux variable envoyés dans le body\nconst bodyParser = require('body-parser');\n\nrouter.use(bodyParser.json());\nrouter.use(express.urlencoded({ extended: false }));\n\nconst morgan = require('morgan');\n\nrouter.use(morgan('dev'));\n\nconst Models = require('../models/index');\nconst userCheckToken = require('../controllers/userCheckToken');\n\n// front send un get avec header\nrouter.get('/getSondage',\n  userCheckToken,\n  (req, res) => {\n    const { sondage_id, remplissage_id } = req.user;\n    const serverResponse = { alreadyAnswered: false };\n    Models.Remplissage.findOne({ where: { id: remplissage_id } }).then((remplissage) => {\n      Models.Question.findAll({\n        include: [{\n          model: Models.Thematique,\n        }],\n        where: { sondage_id: sondage_id }, \n      }).then((questions) => {\n        const questionList = [];\n        const thematiqueList = new Map();\n        questions.forEach((question) => {\n          const quest = JSON.parse(JSON.stringify(question));\n          delete quest.thematique;\n          if (!thematiqueList.get(question.dataValues.thematique.dataValues.id)) {\n            thematiqueList.set(\n              question.dataValues.thematique.dataValues.id, \n              question.dataValues.thematique.dataValues,\n            );\n          }\n          const newList = thematiqueList.get(question.dataValues.thematique.dataValues.id);\n          if (newList.questionList) {\n            newList.questionList.push(quest);\n          } else {\n            newList.questionList = [quest];\n          }\n          thematiqueList.set(question.dataValues.thematique.dataValues.id, newList); \n        });\n        thematiqueList.forEach((elem) => {\n          questionList.push(elem);\n        });\n        serverResponse.thematiqueList = questionList; \n\n        console.log(remplissage_id);\n\n        // Si le sondage a déjà été remplis, on renvois les réponses\n        if (remplissage) {\n          serverResponse.alreadyAnswered = true;\n          Models.Reponse.findAll({ where: { remplissage_id: remplissage_id } }).then((reponses) => {\n            Models.Sondage.findOne({ where: { id: sondage_id } }).then((sondage) => {\n              Models.Commentaire.findAll({ where: { remplissage_id: remplissage_id } })\n                .then((commentaires) => {\n                  serverResponse.sondageName = sondage.dataValues.name;\n                  const reponseList = [];\n                  const commentaireList = [];\n                  reponses.forEach((reponse) => {\n                    reponseList.push(reponse);\n                  });\n                  commentaires.forEach((commentaire) => {\n                    commentaireList.push(commentaire);\n                  }); \n                  serverResponse.reponseList = reponseList;\n                  serverResponse.commentaireList = commentaireList;\n                  res.json(serverResponse);\n                });\n            });\n          }); \n        } else {\n          Models.Sondage.findOne({ where: { id: sondage_id } }).then((sondage) => {\n            serverResponse.sondageName = sondage.dataValues.name;\n            res.json(serverResponse);\n          }); \n        }\n      }); \n    });\n  });\n\n\n// front send un post avec header et dans le body un answered_questions (cf index.js)\nrouter.post('/answerSondage',\n  userCheckToken,\n  (req, res) => {\n    const { user_id, sondage_id, remplissage_id } = req.user;\n    console.log(req.body.answered_questions);\n    Models.Remplissage.findById(remplissage_id).then((remplissage) => {\n      if (remplissage) {\n        Models.User.findById(user_id).then((user) => {\n          const sondage = { \n            sondage_id: sondage_id,\n            remplissage_id: remplissage_id,\n            answered_questions: req.body.answered_questions,\n            answered_commentaires: req.body.answered_commentaires,\n          };\n          user.updateSondage(sondage);\n          res.status(200).send({ msg: \"Merci d'avoir modifier votre reponse !\" });\n        });\n      } else {\n        Models.User.findById(user_id).then((user) => {\n          const sondage = { \n            sondage_id: sondage_id,\n            remplissage_id: remplissage_id,\n            answered_questions: req.body.answered_questions,\n            answered_commentaires: req.body.answered_commentaires,\n          };\n          user.answerSondage(sondage);\n          res.status(200).send({ msg: \"Merci d'avoir repondu au sondage !\" });\n        });\n      }\n    });\n  });\n\nrouter.post('/changeFreq', userCheckToken, (req, res) => {\n  if (typeof (req.body.newIntensity) === \"number\") {\n    Models.User.update(\n      { mailIntensity: req.body.newIntensity },\n      { where: req.body.user_id },\n    ).then(res.send({ msg: \"Mail Intensity changed\" }));\n  }\n});\n\nrouter.use((err, req, res, next) => {\n  console.log(\"error: \", err.name);\n  if (err.name === 'UnauthorizedError') {\n    res.status(401).json({ message: 'Unauthorized. Invalid token!' });\n  }\n});\n\nmodule.exports = router;"],"file":"user.js"}