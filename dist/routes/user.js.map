{"version":3,"sources":["../../routes/user.js"],"names":["express","require","router","Router","fs","bodyParser","use","json","urlencoded","extended","morgan","Models","req","res","next","isAuthenticated","url","status","message","post","newCookie","Object","assign","user","body","updatedUser","login","console","log","User","updateUser","id","then","base64Data","photo","replace","findById","dataValues","unlink","error","date","Date","now","writeFile","pseudo","err","update","where","get","findOne","include","model","Group","Sondage","group","sondage_id","sondage","Remplissage","user_id","remplissage","token","alreadyAnswered","generateJwt","send","getUserStat","data","Post","findAll","order","posts","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\n\nconst router = express.Router();\n\nconst fs = require('fs');\n\n// Le body Parser permet d'acceder aux variable envoyés dans le body\nconst bodyParser = require('body-parser');\n\n\n//  De base le poid maximum des données est de 100 kb,\n// On conserve cette limite, le front doit vérifier en amont\nrouter.use(bodyParser.json());\nrouter.use(express.urlencoded({ extended: false }));\n\nconst morgan = require('morgan');\n\nrouter.use(morgan('dev'));\n\n// Récupère les models\nconst Models = require('../models');\n\nrouter.use((req, res, next) => {\n  if (!req.isAuthenticated() && req.url !== '/login') {\n    res.status(401).json({ message: 'Not logged in' });\n  } else {\n    next();\n  }\n});\n\n// --------- Routes protegées-------------\n\nrouter.post('/updateUser', (req, res) => {\n  const newCookie = Object.assign(req.user, req.body.updatedUser);\n  req.login(newCookie, () => {\n    console.log(\"Modified cookie: \", newCookie);\n  });\n  Models.User.updateUser(req.user.id, req.body.updatedUser).then(() => {\n    res.status(200).json(req.body.updatedUser);\n  });\n});\n\nrouter.post('/updatePhoto', (req, res) => {\n  const base64Data = req.body.photo.replace(/^data:image\\/jpeg;base64,/, \"\");\n\n  // Supression de l'ancienne photo\n  Models.User.findById(req.user.id)\n    .then((user) => {\n      if (user.dataValues.photo !== \"/user/photo/default.jpg\") {\n        fs.unlink(`./public${user.dataValues.photo}`, (error) => {\n          if (error) { \n            console.log(\"erreur au cours de la supression de la photo, erreur\", error); \n          } else { \n            console.log(`Photo ${user.dataValues.photo} supprimée !`); \n          }\n        });\n      }\n    });\n  \n  const date = Date.now();\n  fs.writeFile(`./public/user/photo/${req.user.pseudo}-${date}.jpg`, base64Data, 'base64', (err) => {\n    if (err) { \n      console.log(err);\n    } else {\n      const newCookie = Object.assign(req.user, { photo: `/user/photo/${req.user.pseudo}-${date}.jpg` });\n      req.login(newCookie, () => {\n        console.log(\"Modified cookie: \", newCookie);\n      });\n      Models.User.update(\n        { photo: `/user/photo/${req.user.pseudo}-${date}.jpg` },\n        { where: { id: req.user.id } },\n      ).then(() => {\n        res.status(200).json({ photo: `/user/photo/${req.user.pseudo}-${date}.jpg` });\n      });\n    }\n  });\n});\n\nrouter.get('/getToken', (req, res) => {\n  Models.User.findOne({\n    include: [{ model: Models.Group }],\n    where: { id: req.user.id }, \n  }).then((user) => {\n    console.log(user.dataValues);\n    Models.Sondage.findOne({ where: { id: user.dataValues.group.dataValues.sondage_id } })\n      .then((sondage) => {\n        Models.Remplissage.findOne(\n          { where: { user_id: req.user.id, date: Date.now(), sondage_id: sondage.dataValues.id } },\n        ).then((remplissage) => {\n          const sondage_id = sondage.dataValues.id;\n          let token;\n          let alreadyAnswered = false;\n          if (remplissage) {\n            alreadyAnswered = true;\n            token = user.generateJwt(sondage_id, remplissage.dataValues.id);\n          } else {\n            token = user.generateJwt(sondage_id);\n          }\n          res.status(200).send({ token: token, alreadyAnswered: alreadyAnswered });\n        });\n      });\n  });\n});\n\n\nrouter.get('/userStat', (req, res) => {\n  Models.User.findOne({ where: { id: req.user.id } }).then((user) => {\n    user.getUserStat().then((data) => {\n      res.status(200).send(data);\n    });\n  });\n});\n\nrouter.get(\"/getPosts\", (req, res) => {\n  Models.Post.findAll({ order: [['createdAt', 'DESC']] }).then((posts) => {\n    res.json(posts);\n  });\n});\n\nmodule.exports = router;"],"file":"user.js"}