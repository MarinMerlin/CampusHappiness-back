{"version":3,"sources":["../../routes/login.js"],"names":["express","require","passport","router","Router","bodyParser","use","json","urlencoded","extended","morgan","loginStrategy","serializeUser","user","done","deserializeUser","id","post","authenticate","session","req","res","console","log","body","status","message","login","err","serverResponse","firstName","lastName","pseudo","email","photo","get","isAuthenticated","destroy","send","module","exports"],"mappings":"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","sourcesContent":["\nconst express = require('express');\nconst passport = require('passport');\n\nconst router = express.Router();\n\n\n// Le body Parser permet d'acceder aux variable envoyÃ©s dans le body\nconst bodyParser = require('body-parser');\n\nrouter.use(bodyParser.json());\nrouter.use(express.urlencoded({ extended: false }));\n\nconst morgan = require('morgan');\n\nrouter.use(morgan('dev'));\n\n// Authentification\nconst loginStrategy = require('../passport-config/adminStrategy');\n\npassport.use(loginStrategy);\n\npassport.serializeUser((user, done) => {\n  done(null, user);\n});\n\npassport.deserializeUser(function (id, done) {\n  done(null, id);\n});\n\nrouter.post('/',\n  passport.authenticate('local', { session: true }),\n  (req, res) => {\n    console.log('login');\n    console.log(req.body);\n    switch (req.user) {\n      case \"wrongUser\":\n        res.status(401).json({ message: \"Wrong username\" });\n        break;\n      case \"wrongPass\":\n        res.status(401).json({ message: \"Wrong password\" });\n        break;\n      default:\n        req.login(req.user, (err) => {\n          console.log(\"successfull login\");\n        });\n        const serverResponse = {\n          firstName: req.user.firstName,\n          lastName: req.user.lastName,\n          pseudo: req.user.pseudo,\n          email: req.user.email,\n          photo: req.user.photo,\n        };\n        res.json(serverResponse);\n    }\n  });\n\n// Check if a user is logged in\n\nrouter.get('/check', (req, res) => {\n  if (req.isAuthenticated()) {\n    console.log(req.user);\n    res.json({\n      firstName: req.user.firstName,\n      lastName: req.user.lastName,\n      pseudo: req.user.pseudo,\n      email: req.user.email,\n      photo: req.user.photo,\n    });\n  } else {\n    res.status(401).json({ message: 'Not logged in' });\n  }\n});\n// Logout the session\n\nrouter.get('/logout', (req, res) => {\n  req.session.destroy();\n  res.send(\"User logged out\");\n});\n\nmodule.exports = router;"],"file":"login.js"}