{"version":3,"sources":["../../../models/constructor/admin.js"],"names":["Sequelize","require","crypto","jwt","id_generator","env","adminConstructor","sequelize","Admin","define","id","allowNull","type","STRING","primaryKey","pseudo","salt","hash","createdAt","DATE","timestamps","addAdmin","password","date","Date","now","Promise","resolve","randomBytes","toString","sync","then","create","pbkdf2Sync","console","log","prototype","validPassword","generateJwt","expiry","setDate","getDate","sign","exp","parseInt","getTime","admin_token_secret_key","module","exports"],"mappings":"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","sourcesContent":["const Sequelize = require('sequelize');\nconst crypto = require('crypto');\nconst jwt = require('jsonwebtoken');\nconst id_generator = require('../../custom_module/id_generator');\nconst env = require(\"../../const\");\n\nconst adminConstructor = function (sequelize) {\n  const Admin = sequelize.define('admin', {\n    id: {\n      allowNull: false,\n      type: Sequelize.STRING,\n      primaryKey: true,\n    },\n    pseudo: {\n      allowNull: false,\n      type: Sequelize.STRING,\n    },\n    salt: {\n      type: Sequelize.STRING,\n    },\n    hash: {\n      type: Sequelize.STRING,\n    },\n    createdAt: {\n      type: Sequelize.DATE,\n      allowNull: false,\n    },\n  }, {\n    timestamps: false,\n  });\n  Admin.addAdmin = function (pseudo, password, date) {\n    const createdAt = date || Date.now();\n    return new Promise(function (resolve) {\n      const salt = crypto.randomBytes(16).toString('hex');\n      Admin.sync().then(() => {\n        Admin.create({\n          id: id_generator(),\n          pseudo,\n          salt,\n          hash: crypto.pbkdf2Sync(password, salt, 1000, 64, 'sha512').toString('hex'),\n          createdAt: createdAt,\n        }).then(() => {\n          console.log(\"Ajout Admin $$$\");\n          resolve();\n        });\n      });\n    });\n  };\n\n  // instance methods\n  Admin.prototype.validPassword = function (password) {\n    console.log(password);\n    const hash = crypto.pbkdf2Sync(password, this.salt, 1000, 64, 'sha512').toString('hex');\n    console.log(hash);\n    return this.hash === hash;\n  };\n  Admin.prototype.generateJwt = function () {\n    const expiry = new Date();\n    expiry.setDate(expiry.getDate() + 7);\n    return jwt.sign({\n      id: this.id,\n      pseudo: this.pseudo,\n      exp: parseInt(expiry.getTime() / 1000, 10),\n    }, env.admin_token_secret_key);\n  };\n\n  return Admin;\n};\n\n\nmodule.exports = adminConstructor;\n"],"file":"admin.js"}