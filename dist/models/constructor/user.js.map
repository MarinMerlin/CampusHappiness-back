{"version":3,"sources":["../../../models/constructor/user.js"],"names":["Sequelize","require","jwt","id_generator","env","userConstructor","sequelize","User","define","id","type","STRING","allowNull","primaryKey","firstName","lastName","email","lastMailDate","DATE","mailIntensity","INTEGER","timestamps","addUser","Promise","resolve","generatedID","sync","then","create","Date","now","prototype","generateJwt","sondage_id","expiry","setDate","getDate","user_token_expiry_time","sign","user_id","remplissage_id","exp","parseInt","getTime","user_token_secret_key","module","exports"],"mappings":"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","sourcesContent":["const Sequelize = require('sequelize');\nconst jwt = require('jsonwebtoken');\nconst id_generator = require('../../custom_module/id_generator');\nconst env = require(\"../../const\");\n\nconst userConstructor = function (sequelize) {\n  const User = sequelize.define('user', {\n    id: {\n      type: Sequelize.STRING,\n      allowNull: false,\n      primaryKey: true,\n    },\n    firstName: {\n      allowNull: false,\n      type: Sequelize.STRING,\n    },\n    lastName: {\n      allowNull: false,\n      type: Sequelize.STRING,\n    },\n    email: {\n      allowNull: false,\n      type: Sequelize.STRING,\n    },\n    lastMailDate: {\n      type: Sequelize.DATE,\n    },\n    mailIntensity: {\n      type: Sequelize.INTEGER,\n    },\n  }, {\n    timestamps: false,\n  });\n\n  // Class Methods\n  User.addUser = function (firstName, lastName, email) {\n    return new Promise(function (resolve) {\n      const generatedID = id_generator();\n      User.sync().then(() => {\n        User.create({\n          id: generatedID,\n          firstName,\n          lastName,\n          email,\n          mailIntensity: 1,\n          lastMailDate: Date.now() - 86400000,\n        }).then(() => {\n          resolve();\n        });\n      });\n    });\n  };\n\n  // Instance methods\n  User.prototype.generateJwt = function (sondage_id) {\n    const expiry = new Date();\n    expiry.setDate(expiry.getDate() + env.user_token_expiry_time);\n    return jwt.sign({\n      user_id: this.id,\n      sondage_id: sondage_id,\n      remplissage_id: id_generator(),\n      firstName: this.firstName,\n      lastName: this.lastName,\n      exp: parseInt(expiry.getTime() / 1000, 10),\n    }, env.user_token_secret_key);\n  };\n  return User;\n};\n\nmodule.exports = userConstructor;\n"],"file":"user.js"}