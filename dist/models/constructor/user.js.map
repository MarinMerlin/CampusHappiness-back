{"version":3,"sources":["../../../models/constructor/user.js"],"names":["Sequelize","require","crypto","jwt","id_generator","env","userConstructor","sequelize","User","define","id","type","STRING","allowNull","primaryKey","firstName","lastName","email","pseudo","salt","hash","auth","INTEGER","photo","lastMailDate","DATE","mailIntensity","timestamps","addUser","password","Promise","resolve","generatedID","randomBytes","toString","sync","then","create","pbkdf2Sync","Date","now","prototype","validPassword","generateJwt","sondage_id","expiry","setDate","getDate","user_token_expiry_time","sign","user_id","remplissage_id","exp","parseInt","getTime","user_token_secret_key","module","exports"],"mappings":"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","sourcesContent":["const Sequelize = require('sequelize');\nconst crypto = require('crypto');\nconst jwt = require('jsonwebtoken');\nconst id_generator = require('../../custom_module/id_generator');\nconst env = require(\"../../const\");\n\nconst userConstructor = function (sequelize) {\n  const User = sequelize.define('user', {\n    id: {\n      type: Sequelize.STRING,\n      allowNull: false,\n      primaryKey: true,\n    },\n    firstName: {\n      allowNull: false,\n      type: Sequelize.STRING,\n    },\n    lastName: {\n      allowNull: false,\n      type: Sequelize.STRING,\n    },\n    email: {\n      allowNull: false,\n      type: Sequelize.STRING,\n    },\n    pseudo: {\n      type: Sequelize.STRING,\n    },\n    salt: {\n      type: Sequelize.STRING,\n    },\n    hash: {\n      type: Sequelize.STRING,\n    },\n    auth: {\n      type: Sequelize.INTEGER,\n    },\n    photo: {\n      type: Sequelize.STRING,\n    },\n    lastMailDate: {\n      type: Sequelize.DATE,\n    },\n    mailIntensity: {\n      type: Sequelize.INTEGER,\n    },\n  }, {\n    timestamps: false,\n  });\n\n  // Class Methods\n  User.addUser = function (firstName, lastName, email, pseudo, password, auth, photo = '/user/photo/default.jpg') {\n    return new Promise(function (resolve) {\n      const generatedID = id_generator();\n      const salt = crypto.randomBytes(16).toString('hex');\n      User.sync().then(() => {\n        User.create({\n          id: generatedID,\n          firstName,\n          lastName,\n          email,\n          pseudo,\n          auth,\n          salt,\n          hash: crypto.pbkdf2Sync(password, salt, 1000, 64, 'sha512').toString('hex'),\n          photo,\n          mailIntensity: 1,\n          lastMailDate: Date.now() - 86400000,\n        }).then(() => {\n          resolve();\n        });\n      });\n    });\n  };\n\n  // Instance methods\n  User.prototype.validPassword = function (password) {\n    const hash = crypto.pbkdf2Sync(password, this.salt, 1000, 64, 'sha512').toString('hex');\n    return this.hash === hash;\n  };\n\n  User.prototype.generateJwt = function (sondage_id) {\n    const expiry = new Date();\n    expiry.setDate(expiry.getDate() + env.user_token_expiry_time);\n    return jwt.sign({\n      user_id: this.id,\n      sondage_id: sondage_id,\n      remplissage_id: id_generator(),\n      firstName: this.firstName,\n      lastName: this.lastName,\n      exp: parseInt(expiry.getTime() / 1000, 10),\n    }, env.user_token_secret_key);\n  };\n  return User;\n};\n\nmodule.exports = userConstructor;\n"],"file":"user.js"}