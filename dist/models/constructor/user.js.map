{"version":3,"sources":["../../../models/constructor/user.js"],"names":["Sequelize","require","jwt","id_generator","env","userConstructor","sequelize","User","define","id","type","STRING","allowNull","primaryKey","firstName","lastName","email","lastMailDate","DATE","mailIntensity","INTEGER","addUser","generatedID","sync","then","create","Date","now","printAllDates","findAll","users","forEach","user","ditLu","prototype","generateJwt","sondage_id","expiry","setDate","getDate","user_token_expiry_time","sign","user_id","remplissage_id","exp","parseInt","getTime","user_token_secret_key","module","exports"],"mappings":"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","sourcesContent":["const Sequelize = require('sequelize');\nconst jwt = require('jsonwebtoken');\nconst id_generator = require('../../custom_module/id_generator');\nconst env = require(\"../../const\");\n\nconst userConstructor = function (sequelize) {\n  const User = sequelize.define('user', {\n    id: {\n      type: Sequelize.STRING,\n      allowNull: false,\n      primaryKey: true,\n    },\n    firstName: {\n      allowNull: false,\n      type: Sequelize.STRING,\n    },\n    lastName: {\n      allowNull: false,\n      type: Sequelize.STRING,\n    },\n    email: {\n      allowNull: false,\n      type: Sequelize.STRING,\n    },\n    lastMailDate: {\n      type: Sequelize.DATE,\n    },\n    mailIntensity: {\n      type: Sequelize.INTEGER,\n    },\n  });\n\n  // Class Methods\n  User.addUser = function (firstName, lastName, email) {\n    const generatedID = id_generator();\n\n    User.sync().then(() => {\n      User.create({\n        id: generatedID,\n        firstName,\n        lastName,\n        email,\n        mailIntensity: 1,\n        lastMailDate: Date.now(),\n      });\n    });\n  };\n\n  User.printAllDates = function () {\n    User.findAll().then((users) => {\n      users.forEach((user) => {\n        user.ditLu();\n      });\n    });\n  };\n\n  // Instance methods\n  User.prototype.generateJwt = function (sondage_id) {\n    const expiry = new Date();\n    expiry.setDate(expiry.getDate() + env.user_token_expiry_time);\n    return jwt.sign({\n      user_id: this.id,\n      sondage_id: sondage_id,\n      remplissage_id: id_generator(),\n      firstName: this.firstName,\n      lastName: this.lastName,\n      exp: parseInt(expiry.getTime() / 1000, 10),\n    }, env.user_token_secret_key);\n  };\n  return User;\n};\n\nmodule.exports = userConstructor;\n"],"file":"user.js"}