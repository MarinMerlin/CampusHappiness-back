{"version":3,"sources":["../../../models/constructor/user.js"],"names":["Sequelize","require","crypto","jwt","id_generator","env","accountCreationMail","userConstructor","sequelize","User","define","id","type","STRING","allowNull","primaryKey","firstName","lastName","email","pseudo","salt","hash","auth","INTEGER","photo","lastMailDate","DATE","mailIntensity","group_id","timestamps","addUser","password","default_group","Promise","resolve","generatedID","randomBytes","toString","sync","then","create","pbkdf2Sync","Date","now","user","dataValues","updateUser","data","update","where","prototype","validPassword","generateJwt","sondage_id","id_remplissage","expiry","remplissage_id","setDate","getDate","user_token_expiry_time","sign","user_id","exp","parseInt","getTime","user_token_secret_key","module","exports"],"mappings":"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","sourcesContent":["const Sequelize = require('sequelize');\nconst crypto = require('crypto');\nconst jwt = require('jsonwebtoken');\nconst id_generator = require('../../custom_module/id_generator');\nconst env = require(\"../../const\");\nconst accountCreationMail = require('../../mail/accountCreation');\n\nconst userConstructor = function (sequelize) {\n  const User = sequelize.define('user', {\n    id: {\n      type: Sequelize.STRING,\n      allowNull: false,\n      primaryKey: true,\n    },\n    firstName: {\n      allowNull: false,\n      type: Sequelize.STRING,\n    },\n    lastName: {\n      allowNull: false,\n      type: Sequelize.STRING,\n    },\n    email: {\n      allowNull: false,\n      type: Sequelize.STRING,\n    },\n    pseudo: {\n      type: Sequelize.STRING,\n    },\n    salt: {\n      type: Sequelize.STRING,\n    },\n    hash: {\n      type: Sequelize.STRING,\n    },\n    auth: {\n      type: Sequelize.INTEGER,\n    },\n    photo: {\n      type: Sequelize.STRING,\n    },\n    lastMailDate: {\n      type: Sequelize.DATE,\n    },\n    mailIntensity: {\n      type: Sequelize.INTEGER,\n    },\n    group_id: {\n      type: Sequelize.STRING,\n    },\n  }, {\n    timestamps: false,\n  });\n\n  // Class Methods\n  User.addUser = function (firstName, lastName, email, pseudo, password, auth, group_id = env.default_group) {\n    return new Promise(function (resolve) {\n      const generatedID = id_generator();\n      const salt = crypto.randomBytes(16).toString('hex');\n      User.sync().then(() => {\n        User.create({\n          id: generatedID,\n          firstName,\n          lastName,\n          email,\n          pseudo,\n          auth,\n          salt,\n          hash: crypto.pbkdf2Sync(password, salt, 1000, 64, 'sha512').toString('hex'),\n          photo: '/user/photo/default.jpg',\n          mailIntensity: 1,\n          group_id: group_id,\n          lastMailDate: Date.now() - 86400000,\n        }).then((user) => {\n          accountCreationMail({\n            ...user.dataValues,\n            password: password,\n          });\n          resolve();\n        });\n      });\n    });\n  };\n\n  User.updateUser = function (id, data) {\n    return new Promise(function (resolve) {\n      const salt = crypto.randomBytes(16).toString('hex');\n      if (data.password) {\n        User.update(\n          {\n            firstName: data.firstName,\n            lastName: data.lastName,\n            email: data.email,\n            pseudo: data.pseudo,\n            salt: salt,\n            hash: crypto.pbkdf2Sync(data.password, salt, 1000, 64, 'sha512').toString('hex'),\n          },\n          { where: { id: id } },\n        ).then(resolve());\n      } else {\n        User.update(\n          {\n            firstName: data.firstName,\n            lastName: data.lastName,\n            email: data.email,\n            pseudo: data.pseudo,\n          },\n          { where: { id: id } },\n        ).then(resolve());\n      }\n    });\n  };\n\n  // Instance methods\n  User.prototype.validPassword = function (password) {\n    const hash = crypto.pbkdf2Sync(password, this.salt, 1000, 64, 'sha512').toString('hex');\n    return this.hash === hash;\n  };\n\n  User.prototype.generateJwt = function (sondage_id, id_remplissage = null) {\n    const expiry = new Date();\n    const remplissage_id = id_remplissage || id_generator();\n    expiry.setDate(expiry.getDate() + env.user_token_expiry_time);\n    return jwt.sign({\n      user_id: this.id,\n      sondage_id: sondage_id,\n      remplissage_id: remplissage_id,\n      firstName: this.firstName,\n      lastName: this.lastName,\n      exp: parseInt(expiry.getTime() / 1000, 10),\n    }, env.user_token_secret_key);\n  };\n  return User;\n};\n\nmodule.exports = userConstructor;\n"],"file":"user.js"}