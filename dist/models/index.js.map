{"version":3,"sources":["../../models/index.js"],"names":["Sequelize","require","env","id_generator","userConstructor","adminConstructor","jourSondageConstructor","questionConstructor","remplissageConstructor","reponseConstructor","sondageConstructor","thematiqueConstructor","commentaireConstructor","sequelize","database","username","password","host","dialect","operatorsAliases","pool","max","min","acquire","idle","User","Admin","JourSondage","Question","Remplissage","Reponse","Sondage","Thematique","Commentaire","belongsTo","foreignKey","targetKey","prototype","getSondage","next","sondageList","findAll","then","sondages","include","model","questions","forEach","sondage","thematiqueList","question","dataValues","sondage_id","id","thema","filter","thematique","thematique_id","length","questionList","push","valeur","name","createSondage","addSondage","pseudo","Date","now","findOrCreate","where","defaults","spread","created_or_found_thematique","created_value","console","log","addQuestion","text","keyWord","answerSondage","remplissage_id","addRemplissage","answered_questions","addReponse","question_id","answer","answered_commentaires","commentaire","addCommentaire","updateSondage","findOne","reponse","updateReponse","comment","updateCommentaire","Models","module","exports"],"mappings":"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","sourcesContent":["const Sequelize = require('sequelize');\nconst env = require('../const');\nconst id_generator = require('../custom_module/id_generator');\n\n// models constructors\nconst userConstructor = require('./constructor/user');\nconst adminConstructor = require('./constructor/admin');\nconst jourSondageConstructor = require('./constructor/jourSondage');\nconst questionConstructor = require('./constructor/question');\nconst remplissageConstructor = require('./constructor/remplissage');\nconst reponseConstructor = require('./constructor/reponse');\nconst sondageConstructor = require('./constructor/sondage');\nconst thematiqueConstructor = require('./constructor/thematique');\nconst commentaireConstructor = require('./constructor/commentaire');\n\n// sequelize connection\nconst sequelize = new Sequelize(env.database, env.username, env.password, {\n  host: env.host,\n  dialect: 'mysql',\n  operatorsAliases: false,\n  pool: {\n    max: 5,\n    min: 0,\n    acquire: 30000,\n    idle: 10000,\n  },\n});\n\n// Models\nconst User = userConstructor(sequelize);\nconst Admin = adminConstructor(sequelize);\nconst JourSondage = jourSondageConstructor(sequelize);\nconst Question = questionConstructor(sequelize);\nconst Remplissage = remplissageConstructor(sequelize);\nconst Reponse = reponseConstructor(sequelize);\nconst Sondage = sondageConstructor(sequelize);\nconst Thematique = thematiqueConstructor(sequelize);\nconst Commentaire = commentaireConstructor(sequelize);\n\n// Foreign keys\nQuestion.belongsTo(Sondage, { foreignKey: 'sondage_id', targetKey: 'id' });\nJourSondage.belongsTo(Sondage, { foreignKey: 'sondage_id', targetKey: 'id' });\nReponse.belongsTo(Question, { foreignKey: 'question_id', targetKey: 'id' });\nReponse.belongsTo(Remplissage, { foreignKey: 'remplissage_id', targetKey: 'id' });\nRemplissage.belongsTo(Sondage, { foreignKey: 'sondage_id', targetKey: 'id' });\nRemplissage.belongsTo(User, { foreignKey: 'user_id', targetKey: 'id' });\nQuestion.belongsTo(Thematique, { foreignKey: 'thematique_id', targetKey: 'id' });\nCommentaire.belongsTo(Thematique, { foreignKey: 'thematique_id', targetKey: 'id' });\nCommentaire.belongsTo(Remplissage, { foreignKey: 'remplissage_id', targetKey: 'id' });\n\n// --------  instance method ----------\n\n\n// structure input:\n// let sondage = [\n//   {\n//     name: \"...\",\n//     questions: [\n//       \"quelle ... ?\",\n//       \"avez vous ...?\",\n//       \"...\"\n//     ]\n//   }\n// ]\n\nAdmin.prototype.getSondage = function (next) {\n  const sondageList = [];\n  Sondage.findAll().then((sondages) => {\n    Question.findAll({\n      include: [{\n        model: Thematique,\n      }],\n    }).then((questions) => {\n      sondages.forEach((sondage) => {\n        const thematiqueList = [];\n        questions.forEach((question) => {\n          if (question.dataValues.sondage_id === sondage.dataValues.id) {\n            const thema = thematiqueList.filter(\n              thematique => thematique.id === question.dataValues.thematique_id,\n            );\n            if (thema.length > 0) {\n              thema[0].questionList.push({\n                id: question.dataValues.id, \n                question: question.dataValues.valeur,\n              });\n            } else {\n              thematiqueList.push({\n                id: question.dataValues.thematique_id,\n                name: question.dataValues.thematique.dataValues.name,\n                questionList: [{\n                  id: question.dataValues.id, \n                  question: question.dataValues.valeur,\n                }],\n              });\n            }\n          }\n        });\n        sondageList.push({\n          id: sondage.dataValues.id, \n          name: sondage.dataValues.name,\n          thematiqueList: thematiqueList,\n        });\n      });\n      next(sondageList);\n    });\n  });\n};\n\nAdmin.prototype.createSondage = function (sondage, next) {\n  const sondage_id = id_generator();\n  Sondage.addSondage(sondage_id, this.pseudo, Date.now(), sondage.name);\n  sondage.thematiqueList.forEach((thematique) => {\n    Thematique.findOrCreate(\n      { where: { name: thematique.name }, defaults: { name: thematique.name, id: id_generator() } },\n    ).spread(\n      (created_or_found_thematique, created_value) => {\n        if (created_value) {\n          console.log(\"nouvelle thematique\");\n        }\n        thematique.questionList.forEach((question) => {\n          Question.addQuestion(sondage_id, created_or_found_thematique.id, question.text, question.keyWord);\n        });\n      },\n    );\n  });\n  next();\n};\n\n// input\n// const sondage = {\n//   remlissage_id: \"...\"\n//   sondage_id: \"..\",\n//   answered_questions: [\n//     {\n//       question_id: \"...\",\n//       answer: \"...\",\n//     },\n//   answered_commentaires: [\n//     {\n//      thematique_id: \"...\",\n//      answer: \"...\",\n//     },\n//   ],\n// };\n// uniquement les questions auxquelles l'ut a repondue, pas de question sans reponses\nUser.prototype.answerSondage = function (sondage) {\n  const remplissage_id = sondage.remplissage_id;\n  Remplissage.addRemplissage(remplissage_id, sondage.sondage_id, this.id, Date.now());\n  sondage.answered_questions.forEach((question) => {\n    Reponse.addReponse(remplissage_id, question.question_id, question.answer);\n  });\n  sondage.answered_commentaires.forEach((commentaire) => {\n    Commentaire.addCommentaire(remplissage_id, commentaire.thematique_id, commentaire.answer);\n  });\n};\n\nUser.prototype.updateSondage = function (sondage) {\n  const remplissage_id = sondage.remplissage_id;\n  sondage.answered_questions.forEach((question) => {\n    Reponse.findOne({\n      where: { \n        remplissage_id: remplissage_id, \n        question_id: question.question_id,\n      }, \n    })\n      .then((reponse) => {\n        Reponse.updateReponse(reponse.dataValues.id, question.answer);\n      });\n  });\n  sondage.answered_commentaires.forEach((commentaire) => {\n    Commentaire.findOne({\n      where: {\n        remplissage_id: remplissage_id, \n        thematique_id: commentaire.thematique_id,\n      }, \n    })\n      .then((comment) => {\n        Commentaire.updateCommentaire(comment.dataValues.id, commentaire.answer);\n      });\n  });\n};\n\nconst Models = {\n  User: User,\n  Admin: Admin,\n  Sondage: Sondage,\n  JourSondage: JourSondage,\n  Remplissage: Remplissage,\n  Question: Question,\n  Reponse: Reponse,\n  Thematique: Thematique,\n  Commentaire: Commentaire,\n};\n\n\n// exemple d'update\n// User.update({firstName:\"Jean UPDATED :) \"},{where:{id:\"7k6ngokwvdpjueo7yv3i\"}})\n\n// exemple findById\n// User.findById(\"7k6ngokwvdpjueo7yv3i\").then((user)=>{\n//     console.log(user)\n// })\n\nmodule.exports = Models;"],"file":"index.js"}