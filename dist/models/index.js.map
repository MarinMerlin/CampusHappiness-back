{"version":3,"sources":["../../models/index.js"],"names":["Sequelize","require","env","id_generator","userConstructor","adminConstructor","jourSondageConstructor","questionConstructor","remplissageConstructor","reponseConstructor","sondageConstructor","thematiqueConstructor","commentaireConstructor","sequelize","database","username","password","host","dialect","operatorsAliases","pool","max","min","acquire","idle","User","Admin","JourSondage","Question","Remplissage","Reponse","Sondage","Thematique","Commentaire","belongsTo","foreignKey","targetKey","prototype","createSondage","sondage","sondage_id","console","log","addSondage","pseudo","Date","now","name","thematiqueList","forEach","thematique","findOrCreate","where","defaults","id","spread","created_or_found_thematique","created_value","questionList","question","addQuestion","answerSondage","remplissage_id","addRemplissage","answered_questions","addReponse","question_id","answer","answered_commentaires","commentaire","addCommentaire","thematique_id","updateSondage","findOne","then","reponse","updateReponse","dataValues","comment","updateCommentaire","Models","module","exports"],"mappings":"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","sourcesContent":["const Sequelize = require('sequelize');\nconst env = require('../const');\nconst id_generator = require('../custom_module/id_generator');\n\n// models constructors\nconst userConstructor = require('./constructor/user');\nconst adminConstructor = require('./constructor/admin');\nconst jourSondageConstructor = require('./constructor/jourSondage');\nconst questionConstructor = require('./constructor/question');\nconst remplissageConstructor = require('./constructor/remplissage');\nconst reponseConstructor = require('./constructor/reponse');\nconst sondageConstructor = require('./constructor/sondage');\nconst thematiqueConstructor = require('./constructor/thematique');\nconst commentaireConstructor = require('./constructor/commentaire');\n\n// sequelize connection\nconst sequelize = new Sequelize(env.database, env.username, env.password, {\n  host: env.host,\n  dialect: 'mysql',\n  operatorsAliases: false,\n  pool: {\n    max: 5,\n    min: 0,\n    acquire: 30000,\n    idle: 10000,\n  },\n});\n\n// Models\nconst User = userConstructor(sequelize);\nconst Admin = adminConstructor(sequelize);\nconst JourSondage = jourSondageConstructor(sequelize);\nconst Question = questionConstructor(sequelize);\nconst Remplissage = remplissageConstructor(sequelize);\nconst Reponse = reponseConstructor(sequelize);\nconst Sondage = sondageConstructor(sequelize);\nconst Thematique = thematiqueConstructor(sequelize);\nconst Commentaire = commentaireConstructor(sequelize);\n\n// Foreign keys\nQuestion.belongsTo(Sondage, { foreignKey: 'sondage_id', targetKey: 'id' });\nJourSondage.belongsTo(Sondage, { foreignKey: 'sondage_id', targetKey: 'id' });\nReponse.belongsTo(Question, { foreignKey: 'question_id', targetKey: 'id' });\nReponse.belongsTo(Remplissage, { foreignKey: 'remplissage_id', targetKey: 'id' });\nRemplissage.belongsTo(Sondage, { foreignKey: 'sondage_id', targetKey: 'id' });\nRemplissage.belongsTo(User, { foreignKey: 'user_id', targetKey: 'id' });\nQuestion.belongsTo(Thematique, { foreignKey: 'thematique_id', targetKey: 'id' });\nCommentaire.belongsTo(Thematique, { foreignKey: 'thematique_id', targetKey: 'id' });\nCommentaire.belongsTo(Remplissage, { foreignKey: 'remplissage_id', targetKey: 'id' });\n\n// --------  instance method ----------\n\n\n// structure input:\n// let sondage = [\n//   {\n//     name: \"...\",\n//     questions: [\n//       \"quelle ... ?\",\n//       \"avez vous ...?\",\n//       \"...\"\n//     ]\n//   }\n// ]\nAdmin.prototype.createSondage = function (sondage) {\n  const sondage_id = id_generator();\n  console.log(sondage);\n  Sondage.addSondage(sondage_id, this.pseudo, Date.now(), sondage.name);\n  sondage.thematiqueList.forEach((thematique) => {\n    Thematique.findOrCreate(\n      { where: { name: thematique.name }, defaults: { name: thematique.name, id: id_generator() } },\n    ).spread(\n      (created_or_found_thematique, created_value) => {\n        if (created_value) {\n          console.log(\"nouvelle thematique\");\n        }\n        thematique.questionList.forEach((question) => {\n          Question.addQuestion(sondage_id, created_or_found_thematique.id, question.question);\n        });\n      },\n    );\n  });\n};\n\n// input\n// const sondage = {\n//   remlissage_id: \"...\"\n//   sondage_id: \"..\",\n//   answered_questions: [\n//     {\n//       question_id: \"...\",\n//       answer: \"...\",\n//     },\n//   answered_commentaires: [\n//     {\n//      thematique_id: \"...\",\n//      answer: \"...\",\n//     },\n//   ],\n// };\n// uniquement les questions auxquelles l'ut a repondue, pas de question sans reponses\nUser.prototype.answerSondage = function (sondage) {\n  const remplissage_id = sondage.remplissage_id;\n  Remplissage.addRemplissage(remplissage_id, sondage.sondage_id, this.id, Date.now());\n  sondage.answered_questions.forEach((question) => {\n    Reponse.addReponse(remplissage_id, question.question_id, question.answer);\n  });\n  sondage.answered_commentaires.forEach((commentaire) => {\n    Commentaire.addCommentaire(remplissage_id, commentaire.thematique_id, commentaire.answer);\n  });\n};\n\nUser.prototype.updateSondage = function (sondage) {\n  const remplissage_id = sondage.remplissage_id;\n  sondage.answered_questions.forEach((question) => {\n    Reponse.findOne({\n      where: { \n        remplissage_id: remplissage_id, \n        question_id: question.question_id,\n      }, \n    })\n      .then((reponse) => {\n        Reponse.updateReponse(reponse.dataValues.id, question.answer);\n      });\n  });\n  sondage.answered_commentaires.forEach((commentaire) => {\n    Commentaire.findOne({\n      where: {\n        remplissage_id: remplissage_id, \n        thematique_id: commentaire.thematique_id,\n      }, \n    })\n      .then((comment) => {\n        Commentaire.updateCommentaire(comment.dataValues.id, commentaire.answer);\n      });\n  });\n};\n\nconst Models = {\n  User: User,\n  Admin: Admin,\n  Sondage: Sondage,\n  JourSondage: JourSondage,\n  Remplissage: Remplissage,\n  Question: Question,\n  Reponse: Reponse,\n  Thematique: Thematique,\n  Commentaire: Commentaire,\n};\n\n\n// exemple d'update\n// User.update({firstName:\"Jean UPDATED :) \"},{where:{id:\"7k6ngokwvdpjueo7yv3i\"}})\n\n// exemple findById\n// User.findById(\"7k6ngokwvdpjueo7yv3i\").then((user)=>{\n//     console.log(user)\n// })\n\nmodule.exports = Models;"],"file":"index.js"}