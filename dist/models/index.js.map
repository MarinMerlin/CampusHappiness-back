{"version":3,"sources":["../../models/index.js"],"names":["Sequelize","require","env","id_generator","userConstructor","adminConstructor","jourSondageConstructor","questionConstructor","remplissageConstructor","reponseConstructor","sondageConstructor","thematiqueConstructor","commentaireConstructor","sequelize","database","username","password","host","dialect","operatorsAliases","logging","pool","max","min","acquire","idle","User","Admin","JourSondage","Question","Remplissage","Reponse","Sondage","Thematique","Commentaire","belongsTo","foreignKey","targetKey","prototype","getSondage","next","sondageList","findAll","then","sondages","include","model","questions","forEach","sondage","thematiqueList","question","dataValues","sondage_id","id","thema","filter","thematique","thematique_id","length","questionList","push","valeur","name","current","createSondage","addSondage","pseudo","Date","now","findOrCreate","where","defaults","spread","created_or_found_thematique","created_value","console","log","addQuestion","text","keyWord","getStatistics","statistics","monthSendedSondage","monthAnsweredSondage","totalSendedSondage","totalAnsweredSondage","todayAnsweredSendedRate","todayAverageSatisfaction","weekAverageSatisfaction","getTotalAnsweredSondage","Promise","resolve","count","total","getTotalSendedSondage","sum","all","statisticTab","findSondage","req","user","remplissage_id","serverResponse","alreadyAnswered","findOne","remplissage","Map","quest","JSON","parse","stringify","get","set","newList","elem","reponses","commentaires","sondageName","reponseList","commentaireList","reponse","commentaire","answerSondage","addRemplissage","answered_questions","addReponse","question_id","answer","answered_commentaires","addCommentaire","updateSondage","updateReponse","comment","updateCommentaire","Models","module","exports"],"mappings":"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","sourcesContent":["const Sequelize = require('sequelize');\nconst env = require('../const');\nconst id_generator = require('../custom_module/id_generator');\n\n// models constructors\nconst userConstructor = require('./constructor/user');\nconst adminConstructor = require('./constructor/admin');\nconst jourSondageConstructor = require('./constructor/jourSondage');\nconst questionConstructor = require('./constructor/question');\nconst remplissageConstructor = require('./constructor/remplissage');\nconst reponseConstructor = require('./constructor/reponse');\nconst sondageConstructor = require('./constructor/sondage');\nconst thematiqueConstructor = require('./constructor/thematique');\nconst commentaireConstructor = require('./constructor/commentaire');\n\n// sequelize connection\nconst sequelize = new Sequelize(env.database, env.username, env.password, {\n  host: env.host,\n  dialect: 'mysql',\n  operatorsAliases: false,\n  logging: false,\n  pool: {\n    max: 5,\n    min: 0,\n    acquire: 30000,\n    idle: 10000,\n  },\n});\n\n// Models\nconst User = userConstructor(sequelize);\nconst Admin = adminConstructor(sequelize);\nconst JourSondage = jourSondageConstructor(sequelize);\nconst Question = questionConstructor(sequelize);\nconst Remplissage = remplissageConstructor(sequelize);\nconst Reponse = reponseConstructor(sequelize);\nconst Sondage = sondageConstructor(sequelize);\nconst Thematique = thematiqueConstructor(sequelize);\nconst Commentaire = commentaireConstructor(sequelize);\n\n// Foreign keys\nQuestion.belongsTo(Sondage, { foreignKey: 'sondage_id', targetKey: 'id' });\nJourSondage.belongsTo(Sondage, { foreignKey: 'sondage_id', targetKey: 'id' });\nReponse.belongsTo(Question, { foreignKey: 'question_id', targetKey: 'id' });\nReponse.belongsTo(Remplissage, { foreignKey: 'remplissage_id', targetKey: 'id' });\nRemplissage.belongsTo(Sondage, { foreignKey: 'sondage_id', targetKey: 'id' });\nRemplissage.belongsTo(User, { foreignKey: 'user_id', targetKey: 'id' });\nQuestion.belongsTo(Thematique, { foreignKey: 'thematique_id', targetKey: 'id' });\nCommentaire.belongsTo(Thematique, { foreignKey: 'thematique_id', targetKey: 'id' });\nCommentaire.belongsTo(Remplissage, { foreignKey: 'remplissage_id', targetKey: 'id' });\n\nAdmin.prototype.getSondage = function (next) {\n  const sondageList = [];\n  Sondage.findAll().then((sondages) => {\n    Question.findAll({\n      include: [{\n        model: Thematique,\n      }],\n    }).then((questions) => {\n      sondages.forEach((sondage) => {\n        const thematiqueList = [];\n        questions.forEach((question) => {\n          if (question.dataValues.sondage_id === sondage.dataValues.id) {\n            const thema = thematiqueList.filter(\n              thematique => thematique.id === question.dataValues.thematique_id,\n            );\n            if (thema.length > 0) {\n              thema[0].questionList.push({\n                id: question.dataValues.id, \n                question: question.dataValues.valeur,\n              });\n            } else {\n              thematiqueList.push({\n                id: question.dataValues.thematique_id,\n                name: question.dataValues.thematique.dataValues.name,\n                questionList: [{\n                  id: question.dataValues.id, \n                  question: question.dataValues.valeur,\n                }],\n              });\n            }\n          }\n        });\n        sondageList.push({\n          id: sondage.dataValues.id, \n          name: sondage.dataValues.name,\n          thematiqueList: thematiqueList,\n          current: sondage.dataValues.current,\n        });\n      });\n      next(sondageList);\n    });\n  });\n};\n\nAdmin.prototype.createSondage = function (sondage, next) {\n  const sondage_id = id_generator();\n  Sondage.addSondage(sondage_id, this.pseudo, Date.now(), sondage.name);\n  sondage.thematiqueList.forEach((thematique) => {\n    Thematique.findOrCreate(\n      { where: { name: thematique.name }, defaults: { name: thematique.name, id: id_generator() } },\n    ).spread(\n      (created_or_found_thematique, created_value) => {\n        if (created_value) {\n          console.log(\"nouvelle thematique\");\n        }\n        thematique.questionList.forEach((question) => {\n          Question.addQuestion(\n            sondage_id, created_or_found_thematique.id,\n            question.text,\n            question.keyWord,\n          );\n        });\n      },\n    );\n  });\n  next();\n};\n\nAdmin.prototype.getStatistics = function (next) {\n  const statistics = {\n    monthSendedSondage: [],\n    monthAnsweredSondage: [],\n    totalSendedSondage: 0, // fait\n    totalAnsweredSondage: 0, // fait\n    todayAnsweredSendedRate: 0, // answer/send\n    todayAverageSatisfaction: 0,\n    weekAverageSatisfaction: [],\n  };\n  \n  const getTotalAnsweredSondage = new Promise(function (resolve) {\n    Remplissage.count().then((total) => {\n      resolve(total);\n    });\n  });\n\n  const getTotalSendedSondage = new Promise(function (resolve) {\n    JourSondage.sum('nombre_emission').then((total) => {\n      resolve(total);\n    });\n  });\n\n  Promise.all([\n    getTotalAnsweredSondage,\n    getTotalSendedSondage,\n  ]).then((statisticTab) => {\n    const [totalSendedSondage, totalAnsweredSondage] = statisticTab;\n    next({\n      totalSendedSondage: totalSendedSondage,\n      totalAnsweredSondage: totalAnsweredSondage,\n    });\n  });\n};\n\nUser.prototype.findSondage = function (req, next) {\n  const { sondage_id, remplissage_id } = req.user;\n  const serverResponse = { alreadyAnswered: false };\n  Remplissage.findOne({ where: { id: remplissage_id } }).then((remplissage) => {\n    Question.findAll({\n      include: [{\n        model: Thematique,\n      }],\n      where: { sondage_id: sondage_id }, \n    }).then((questions) => {\n      const questionList = [];\n      const thematiqueList = new Map();\n      questions.forEach((question) => {\n        const quest = JSON.parse(JSON.stringify(question));\n        delete quest.thematique;\n        if (!thematiqueList.get(question.dataValues.thematique.dataValues.id)) {\n          thematiqueList.set(\n            question.dataValues.thematique.dataValues.id, \n            question.dataValues.thematique.dataValues,\n          );\n        }\n        const newList = thematiqueList.get(question.dataValues.thematique.dataValues.id);\n        if (newList.questionList) {\n          newList.questionList.push(quest);\n        } else {\n          newList.questionList = [quest];\n        }\n        thematiqueList.set(question.dataValues.thematique.dataValues.id, newList); \n      });\n      thematiqueList.forEach((elem) => {\n        questionList.push(elem);\n      });\n      serverResponse.thematiqueList = questionList; \n\n      // Si le sondage a déjà été remplis, on renvois les réponses\n      if (remplissage) {\n        serverResponse.alreadyAnswered = true;\n        Reponse.findAll({ where: { remplissage_id: remplissage_id } }).then((reponses) => {\n          Sondage.findOne({ where: { id: sondage_id } }).then((sondage) => {\n            Commentaire.findAll({ where: { remplissage_id: remplissage_id } })\n              .then((commentaires) => {\n                serverResponse.sondageName = sondage.dataValues.name;\n                const reponseList = [];\n                const commentaireList = [];\n                reponses.forEach((reponse) => {\n                  reponseList.push(reponse);\n                });\n                commentaires.forEach((commentaire) => {\n                  commentaireList.push(commentaire);\n                }); \n                serverResponse.reponseList = reponseList;\n                serverResponse.commentaireList = commentaireList;\n                next(serverResponse);\n              });\n          });\n        }); \n      } else {\n        Sondage.findOne({ where: { id: sondage_id } }).then((sondage) => {\n          serverResponse.sondageName = sondage.dataValues.name;\n          next(serverResponse);\n        }); \n      }\n    }); \n  });\n};\n    \n// input\n// const sondage = {\n//   remlissage_id: \"...\"\n//   sondage_id: \"..\",\n//   answered_questions: [\n//     {\n//       question_id: \"...\",\n//       answer: \"...\",\n//     },\n//   answered_commentaires: [\n//     {\n//      thematique_id: \"...\",\n//      answer: \"...\",\n//     },\n//   ],\n// };\n// uniquement les questions auxquelles l'ut a repondue, pas de question sans reponses\nUser.prototype.answerSondage = function (sondage) {\n  const remplissage_id = sondage.remplissage_id;\n  Remplissage.addRemplissage(remplissage_id, sondage.sondage_id, this.id, Date.now());\n  sondage.answered_questions.forEach((question) => {\n    Reponse.addReponse(remplissage_id, question.question_id, question.answer);\n  });\n  sondage.answered_commentaires.forEach((commentaire) => {\n    Commentaire.addCommentaire(remplissage_id, commentaire.thematique_id, commentaire.answer);\n  });\n};\n\nUser.prototype.updateSondage = function (sondage) {\n  const remplissage_id = sondage.remplissage_id;\n  sondage.answered_questions.forEach((question) => {\n    Reponse.findOne({\n      where: { \n        remplissage_id: remplissage_id, \n        question_id: question.question_id,\n      }, \n    })\n      .then((reponse) => {\n        Reponse.updateReponse(reponse.dataValues.id, question.answer);\n      });\n  });\n  sondage.answered_commentaires.forEach((commentaire) => {\n    Commentaire.findOne({\n      where: {\n        remplissage_id: remplissage_id, \n        thematique_id: commentaire.thematique_id,\n      }, \n    })\n      .then((comment) => {\n        Commentaire.updateCommentaire(comment.dataValues.id, commentaire.answer);\n      });\n  });\n};\n\nconst Models = {\n  User: User,\n  Admin: Admin,\n  Sondage: Sondage,\n  JourSondage: JourSondage,\n  Remplissage: Remplissage,\n  Question: Question,\n  Reponse: Reponse,\n  Thematique: Thematique,\n  Commentaire: Commentaire,\n};\n\nmodule.exports = Models;"],"file":"index.js"}