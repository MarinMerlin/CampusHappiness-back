{"version":3,"sources":["../../models/index.js"],"names":["Sequelize","require","env","id_generator","userConstructor","adminConstructor","jourSondageConstructor","questionConstructor","remplissageConstructor","reponseConstructor","sondageConstructor","thematiqueConstructor","commentaireConstructor","sequelize","database","username","password","host","dialect","operatorsAliases","logging","pool","max","min","acquire","idle","User","Admin","JourSondage","Question","Remplissage","Reponse","Sondage","Thematique","Commentaire","belongsTo","foreignKey","targetKey","prototype","getSondage","Promise","resolve","sondageList","findAll","then","sondages","include","model","questions","forEach","sondage","thematiqueList","question","dataValues","sondage_id","id","thema","filter","thematique","thematique_id","length","questionList","push","valeur","name","current","addThematiqueId","thematiqueListWithId","thematiqueWithId","createSondage","addSondage","pseudo","Date","now","promises","addThematique","all","addQuestion","text","keyWord","getStatistics","next","statistics","monthSentSondage","monthAnsweredSondage","totalSentSondage","totalAnsweredSondage","totalRate","totalSatis","todayAnsweredSendedRate","todayAverageSatisfaction","monthAverageSatisfaction","weekRate","getTotalAnsweredSondage","count","total","getTotalSentSondage","sum","getTotalRate","data","rate","parseFloat","toFixed","getTotalSatis","val","getJourSentSondage","jour","jourDate","toLocaleDateString","findOne","where","date_emmission","jsondage","console","log","nombre_emission","getJourAnsweredSondage","date","nb","getMonthSentSondage","intPromises","i","getMonthAnsweredSondage","getDayStatis","reps","satisfaction","rep","getDayRate","Number","getTodayStatis","getTodayRate","getMonthStatis","getWeekRate","statisticTab","findSondage","req","user","remplissage_id","serverResponse","alreadyAnswered","remplissage","Map","quest","JSON","parse","stringify","get","set","newList","elem","reponses","commentaires","sondageName","reponseList","commentaireList","reponse","commentaire","answerSondage","simulationDate","addRemplissage","answered_questions","question_answer","addReponse","question_id","answer","answered_commentaires","commentaire_answer","addCommentaire","updateSondage","updateReponse","comment","updateCommentaire","Models","module","exports"],"mappings":"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","sourcesContent":["const Sequelize = require('sequelize');\nconst env = require('../const');\nconst id_generator = require('../custom_module/id_generator');\n\n// models constructors\nconst userConstructor = require('./constructor/user');\nconst adminConstructor = require('./constructor/admin');\nconst jourSondageConstructor = require('./constructor/jourSondage');\nconst questionConstructor = require('./constructor/question');\nconst remplissageConstructor = require('./constructor/remplissage');\nconst reponseConstructor = require('./constructor/reponse');\nconst sondageConstructor = require('./constructor/sondage');\nconst thematiqueConstructor = require('./constructor/thematique');\nconst commentaireConstructor = require('./constructor/commentaire');\n\n// sequelize connection\nconst sequelize = new Sequelize(env.database, env.username, env.password, {\n  host: env.host,\n  dialect: 'mysql',\n  operatorsAliases: false,\n  logging: false,\n  pool: {\n    max: 5,\n    min: 0,\n    acquire: 30000,\n    idle: 10000,\n  },\n});\n\n// Models\nconst User = userConstructor(sequelize);\nconst Admin = adminConstructor(sequelize);\nconst JourSondage = jourSondageConstructor(sequelize);\nconst Question = questionConstructor(sequelize);\nconst Remplissage = remplissageConstructor(sequelize);\nconst Reponse = reponseConstructor(sequelize);\nconst Sondage = sondageConstructor(sequelize);\nconst Thematique = thematiqueConstructor(sequelize);\nconst Commentaire = commentaireConstructor(sequelize);\n\n// // Foreign keys\nQuestion.belongsTo(Sondage, { foreignKey: 'sondage_id', targetKey: 'id' });\nJourSondage.belongsTo(Sondage, { foreignKey: 'sondage_id', targetKey: 'id' });\nReponse.belongsTo(Question, { foreignKey: 'question_id', targetKey: 'id' });\nReponse.belongsTo(Remplissage, { foreignKey: 'remplissage_id', targetKey: 'id' });\nRemplissage.belongsTo(Sondage, { foreignKey: 'sondage_id', targetKey: 'id' });\nRemplissage.belongsTo(User, { foreignKey: 'user_id', targetKey: 'id' });\nQuestion.belongsTo(Thematique, { foreignKey: 'thematique_id', targetKey: 'id' });\nCommentaire.belongsTo(Thematique, { foreignKey: 'thematique_id', targetKey: 'id' });\nCommentaire.belongsTo(Remplissage, { foreignKey: 'remplissage_id', targetKey: 'id' });\n\n// Should change this function by using promises more\nAdmin.prototype.getSondage = function () {\n  return new Promise((resolve) => {\n    const sondageList = [];\n    Sondage.findAll().then((sondages) => {\n      Question.findAll({\n        include: [{\n          model: Thematique,\n        }],\n      }).then((questions) => {\n        sondages.forEach((sondage) => {\n          const thematiqueList = [];\n          questions.forEach((question) => {\n            if (question.dataValues.sondage_id === sondage.dataValues.id) {\n              const thema = thematiqueList.filter(\n                thematique => thematique.id === question.dataValues.thematique_id,\n              );\n              if (thema.length > 0) {\n                thema[0].questionList.push({\n                  id: question.dataValues.id, \n                  question: question.dataValues.valeur,\n                });\n              } else {\n                thematiqueList.push({\n                  id: question.dataValues.thematique_id,\n                  name: question.dataValues.thematique.dataValues.name,\n                  questionList: [{\n                    id: question.dataValues.id, \n                    question: question.dataValues.valeur,\n                  }],\n                });\n              }\n            }\n          });\n          sondageList.push({\n            id: sondage.dataValues.id, \n            name: sondage.dataValues.name,\n            thematiqueList: thematiqueList,\n            current: sondage.dataValues.current,\n          });\n        });\n        resolve(sondageList);\n      });\n    });\n  });\n};\n\nconst addThematiqueId = function (thematiqueList, thematiqueListWithId) {\n  thematiqueList.forEach((thematique) => {\n    thematiqueListWithId.forEach((thematiqueWithId) => {\n      if (thematiqueWithId.name === thematique.name) {\n        thematique.id = thematiqueWithId.id;\n      }\n    });\n  });\n  return thematiqueList;\n};\n\nAdmin.prototype.createSondage = function (sondage) {\n  return new Promise((resolve) => {\n    const sondage_id = id_generator();\n    Sondage.addSondage(sondage_id, this.pseudo, Date.now(), sondage.name).then(() => {\n      let promises = [];\n      sondage.thematiqueList.forEach((thematique) => {\n        promises.push(Thematique.addThematique(thematique.name));\n      });\n      Promise.all(promises).then((thematiqueListWithId) => {\n        addThematiqueId(sondage.thematiqueList, thematiqueListWithId);\n        promises = [];\n        sondage.thematiqueList.forEach((thematique) => {\n          thematique.questionList.forEach((question) => {\n            promises.push(Question.addQuestion(\n              sondage_id, thematique.id, question.text, question.keyWord,\n            ));\n          });\n        });\n        Promise.all(promises).then(() => { resolve(sondage_id); });\n      });\n    });\n  });\n};\n\nAdmin.prototype.getStatistics = function (next) {\n  const statistics = {\n    monthSentSondage: [], // fait\n    monthAnsweredSondage: [], // fait\n    totalSentSondage: 0, // fait\n    totalAnsweredSondage: 0, // fait\n    totalRate: 0,\n    totalSatis: 0,\n    todayAnsweredSendedRate: 0, // fait\n    todayAverageSatisfaction: 0, // fait\n    monthAverageSatisfaction: [], // fait\n    weekRate: [],\n\n  };\n  \n  const getTotalAnsweredSondage = new Promise(function (resolve) {\n    Remplissage.count().then((total) => {\n      resolve(total);\n    });\n  });\n\n  const getTotalSentSondage = new Promise(function (resolve) {\n    JourSondage.sum('nombre_emission').then((total) => {\n      resolve(total);\n    });\n  });\n\n  const getTotalRate = new Promise((resolve) => {\n    Promise.all([getTotalAnsweredSondage, getTotalSentSondage])\n      .then(((data) => {\n        const rate = parseFloat((data[0] / data[1]).toFixed(3));\n        resolve(rate);\n      }));\n  });\n\n  const getTotalSatis = new Promise((resolve) => {\n    Reponse.sum('valeur').then((val) => {\n      Reponse.count().then(total => resolve(parseFloat((val / total).toFixed(3))));\n    });\n  });\n\n  const getJourSentSondage = jour => new Promise((resolve) => {\n    const jourDate = new Date(jour).toLocaleDateString();\n    JourSondage.findOne({ where: { date_emmission: jour } }).then((jsondage) => {\n      if (jsondage) {\n        console.log(\"On \", jourDate, \", \", jsondage.dataValues.nombre_emission, \" mails were sent.\");\n        resolve(jsondage.dataValues.nombre_emission);\n      } else {\n        console.log(\"No mail sent on: \", jourDate);\n        resolve(0);\n      }\n    });\n  });\n\n  const getJourAnsweredSondage = jour => new Promise((resolve) => {\n    const jourDate = new Date(jour).toLocaleDateString();\n    Remplissage.count({ where: { date: jour } }).then((nb) => {\n      console.log(\"On \", jourDate, \", \", nb, \" sondage were answered.\");\n      resolve(nb);\n    });\n  });\n\n  const getMonthSentSondage = new Promise((resolve) => {\n    const intPromises = [];\n    for (let i = 0; i < 31; i++) {\n      intPromises.push(getJourSentSondage(Date.now() - (86400000 * i)));\n    }\n    Promise.all(intPromises).then((data) => {\n      resolve(data);\n    });\n  });\n\n  const getMonthAnsweredSondage = new Promise((resolve) => {\n    const intPromises = [];\n    for (let i = 0; i < 31; i++) {\n      intPromises.push(getJourAnsweredSondage(Date.now() - (86400000 * i)));\n    }\n    Promise.all(intPromises).then((data) => {\n      resolve(data);\n    });\n  });\n\n  const getDayStatis = jour => new Promise((resolve) => {\n    Reponse.findAll({\n      include: [{\n        model: Remplissage,\n        where: { date: jour },\n      }],\n    }).then((reps) => {\n      if (reps.length > 0) {\n        let satisfaction = 0;\n        reps.forEach((rep) => {\n          satisfaction += rep.dataValues.valeur;\n        });\n        resolve(parseFloat((satisfaction / reps.length).toFixed(3)));\n      } else {\n        resolve(0);\n      }\n    });\n  });\n  \n  const getDayRate = jour => new Promise((resolve) => {\n    Promise.all([getJourAnsweredSondage(jour), getJourSentSondage(jour)])\n      .then(((data) => {\n        console.log(data);\n        let rate = Number;\n        if (data[1] !== 0) {\n          rate = parseFloat((data[0] / data[1]).toFixed(3));\n        } else {\n          rate = 0;\n        }\n        resolve(rate);\n      }));\n  });\n\n  const getTodayStatis = new Promise((resolve) => {\n    getDayStatis(Date.now()).then(data => resolve(data));\n  });\n\n  const getTodayRate = new Promise((resolve) => {\n    getDayRate(Date.now()).then(data => resolve(data));\n  });\n\n  const getMonthStatis = new Promise((resolve) => {\n    const intPromises = [];\n    for (let i = 0; i < 31; i++) {\n      intPromises.push(getDayStatis(Date.now() - (86400000 * i)));\n    }\n    Promise.all(intPromises).then((data) => {\n      resolve(data);\n    });\n  });\n\n  const getWeekRate = new Promise((resolve) => {\n    const intPromises = [];\n    for (let i = 0; i < 8; i++) {\n      intPromises.push(getDayRate(Date.now() - (86400000 * i)));\n    }\n    Promise.all(intPromises).then((data) => {\n      resolve(data);\n    });\n  });\n\n  Promise.all([\n    getTotalAnsweredSondage,\n    getTotalSentSondage,\n    getTotalRate,\n    getTotalSatis,\n    getMonthSentSondage,\n    getMonthAnsweredSondage,\n    getTodayRate,\n    getTodayStatis,\n    getMonthStatis,\n    getWeekRate,\n  ]).then((statisticTab) => {\n    const [\n      totalAnsweredSondage, \n      totalSentSondage, \n      totalRate,\n      totalSatis,\n      monthSentSondage, \n      monthAnsweredSondage,\n      todayAnsweredSendedRate,\n      todayAverageSatisfaction,\n      monthAverageSatisfaction,\n      weekRate,\n    ] = statisticTab;\n    next({\n      totalSentSondage: totalSentSondage,\n      totalAnsweredSondage: totalAnsweredSondage,\n      totalRate: totalRate,\n      totalSatis: totalSatis,\n      monthSentSondage: monthSentSondage,\n      monthAnsweredSondage: monthAnsweredSondage,\n      todayAnsweredSendedRate: todayAnsweredSendedRate,\n      todayAverageSatisfaction: todayAverageSatisfaction,\n      monthAverageSatisfaction: monthAverageSatisfaction,\n      weekRate: weekRate,\n    });\n  });\n};\n\nUser.prototype.findSondage = function (req) {\n  return new Promise((resolve) => {\n    const { sondage_id, remplissage_id } = req.user;\n    const serverResponse = { alreadyAnswered: false };\n    Remplissage.findOne({ where: { id: remplissage_id } }).then((remplissage) => {\n      Question.findAll({\n        include: [{\n          model: Thematique,\n        }],\n        where: { sondage_id: sondage_id }, \n      }).then((questions) => {\n        const questionList = [];\n        const thematiqueList = new Map();\n        questions.forEach((question) => {\n          const quest = JSON.parse(JSON.stringify(question));\n          delete quest.thematique;\n          if (!thematiqueList.get(question.dataValues.thematique.dataValues.id)) {\n            thematiqueList.set(\n              question.dataValues.thematique.dataValues.id, \n              question.dataValues.thematique.dataValues,\n            );\n          }\n          const newList = thematiqueList.get(question.dataValues.thematique.dataValues.id);\n          if (newList.questionList) {\n            newList.questionList.push(quest);\n          } else {\n            newList.questionList = [quest];\n          }\n          thematiqueList.set(question.dataValues.thematique.dataValues.id, newList); \n        });\n        thematiqueList.forEach((elem) => {\n          questionList.push(elem);\n        });\n        serverResponse.thematiqueList = questionList; \n\n        // Si le sondage a déjà été remplis, on renvois les réponses\n        if (remplissage) {\n          serverResponse.alreadyAnswered = true;\n          Reponse.findAll({ where: { remplissage_id: remplissage_id } }).then((reponses) => {\n            Sondage.findOne({ where: { id: sondage_id } }).then((sondage) => {\n              Commentaire.findAll({ where: { remplissage_id: remplissage_id } })\n                .then((commentaires) => {\n                  serverResponse.sondageName = sondage.dataValues.name;\n                  const reponseList = [];\n                  const commentaireList = [];\n                  reponses.forEach((reponse) => {\n                    reponseList.push(reponse);\n                  });\n                  commentaires.forEach((commentaire) => {\n                    commentaireList.push(commentaire);\n                  }); \n                  serverResponse.reponseList = reponseList;\n                  serverResponse.commentaireList = commentaireList;\n                  resolve(serverResponse);\n                });\n            });\n          }); \n        } else {\n          Sondage.findOne({ where: { id: sondage_id } }).then((sondage) => {\n            serverResponse.sondageName = sondage.dataValues.name;\n            resolve(serverResponse);\n          }); \n        }\n      }); \n    });\n  });\n};\n    \n// input\n// const sondage = {\n//   remlissage_id: \"...\"\n//   sondage_id: \"..\",\n//   answered_questions: [\n//     {\n//       question_id: \"...\",\n//       answer: \"...\",\n//     },\n//   answered_commentaires: [\n//     {\n//      thematique_id: \"...\",\n//      answer: \"...\",\n//     },\n//   ],\n// };\n// uniquement les questions auxquelles l'ut a repondue, pas de question sans reponses\nUser.prototype.answerSondage = function (sondage, simulationDate) {\n  const date = simulationDate || Date.now();\n  return new Promise((resolve) => {\n    const remplissage_id = sondage.remplissage_id;\n    const sondage_id = sondage.sondage_id;\n    Remplissage.addRemplissage(remplissage_id, sondage_id, this.id, date).then(() => {\n      const promises = [];\n      sondage.answered_questions.forEach((question_answer) => {\n        promises.push(\n          Reponse.addReponse(remplissage_id, question_answer.question_id, question_answer.answer),\n        );\n      });\n      sondage.answered_commentaires.forEach((commentaire_answer) => {\n        promises.push(\n          Commentaire.addCommentaire(\n            remplissage_id, commentaire_answer.thematique_id, commentaire_answer.answer,\n          ),\n        );\n      });\n      Promise.all(promises).then(() => {\n        resolve();\n      });\n    });\n  });\n};\n\nUser.prototype.updateSondage = function (sondage) {\n  return new Promise((resolve) => {\n    const remplissage_id = sondage.remplissage_id;\n    sondage.answered_questions.forEach((question) => {\n      Reponse.findOne({\n        where: { \n          remplissage_id: remplissage_id, \n          question_id: question.question_id,\n        }, \n      })\n        .then((reponse) => {\n          Reponse.updateReponse(reponse.dataValues.id, question.answer);\n        });\n    });\n    sondage.answered_commentaires.forEach((commentaire) => {\n      Commentaire.findOne({\n        where: {\n          remplissage_id: remplissage_id, \n          thematique_id: commentaire.thematique_id,\n        }, \n      })\n        .then((comment) => {\n          Commentaire.updateCommentaire(comment.dataValues.id, commentaire.answer);\n        });\n    });\n    resolve();\n  });\n};\n\nconst Models = {\n  User: User,\n  Admin: Admin,\n  Sondage: Sondage,\n  JourSondage: JourSondage,\n  Remplissage: Remplissage,\n  Question: Question,\n  Reponse: Reponse,\n  Thematique: Thematique,\n  Commentaire: Commentaire,\n};\n\nmodule.exports = Models;"],"file":"index.js"}